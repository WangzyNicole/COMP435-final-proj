{"remainingRequest":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/babel-loader/lib/index.js!/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ziyiwang/Desktop/COMP435-final proj copy/src/views/solarSystem.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/src/views/solarSystem.vue","mtime":1702085772000},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/babel.config.js","mtime":1702069282000},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/babel-loader/lib/index.js","mtime":1702276326097},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/vue-loader/lib/index.js","mtime":1702276330641}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; //鼠标控制\nimport SetSolarSystem from \"./components/SetSolarSystem\";\nimport PlanetText from \"./components/PlanetText\";\nimport planetData from \"./planetData.js\"; //导入星球数据\nimport universeImg from \"./img/universe.jpg\"; //宇宙\nimport starImg from \"./img/star.jpg\"; //星辰\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\"; //金星大气\nimport moonImg from \"./img/moon.jpg\"; //月球\nimport earthNormalImg from \"./img/earthNormal.jpg\"; //法线贴图\nimport earthCloudsImg from \"./img/earthClouds.jpg\"; //地球云层\n\nvar scene = null; //场景(频繁变更的对象放置在vue的data中会导致卡顿)\nvar camera = null; //相机\nvar orbitControls = null; //鼠标控件\nexport default {\n  props: {},\n  components: {\n    SetSolarSystem: SetSolarSystem,\n    PlanetText: PlanetText\n  },\n  data: function data() {\n    return {\n      dom: \"\",\n      //需要使用canvas的dom\n      renderer: \"\",\n      //渲染器\n      anId: null,\n      //动画id\n      planetList: planetData,\n      isRevolution: true,\n      //公转状态\n      isRotation: true,\n      //自转状态\n      raycaster: new THREE.Raycaster(),\n      //光线投射器(用于鼠标点击时获取坐标)\n      mouse: new THREE.Vector2(),\n      //鼠标点击的二维平面\n      clickPlanet: \"\" //当前点击的星球\n    };\n  },\n  computed: {},\n  watch: {},\n  created: function created() {},\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    //改变设置\n    changeSet: function changeSet(data) {\n      if (data.key == \"isRevolution\") {\n        this.isRevolution = data.val;\n      }\n      if (data.key == \"isRotation\") {\n        this.isRotation = data.val;\n      }\n    },\n    //销毁场景\n    destroyScene: function destroyScene() {\n      cancelAnimationFrame(this.anId); //根据动画id停止动画渲染\n      this.renderer.forceContextLoss(); //强制失去上下文\n      this.renderer.dispose();\n      scene.clear();\n      scene = null;\n      camera = null;\n      orbitControls = null;\n      this.dom.innerHTML = null;\n      this.renderer = null;\n    },\n    //初始化场景\n    init: function init() {\n      var _this = this;\n      this.dom = document.getElementById(\"planetDiv\"); //获取dom\n      var width = this.dom.clientWidth;\n      var height = this.dom.clientHeight;\n      scene = new THREE.Scene(); //场景场景\n      // scene.add(new THREE.AxesHelper(500));\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //创建透视相机(视场、长宽比、近面、远面)\n      camera.position.set(0, 500, 2700); //设置相机位置\n      camera.lookAt(0, 0, 0);\n      //创建渲染器\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        //抗锯齿\n        alpha: true //透明\n      });\n      this.renderer.setClearColor(0x000000, 0.1); //设置场景透明度\n      this.renderer.setSize(width, height); //设置渲染区域尺寸\n      this.dom.appendChild(this.renderer.domElement); //将渲染器添加到dom中形成canvas\n      this.createUniverse(); //创建宇宙\n      this.createStars(); //创建星辰\n      this.createLight(); //创建光源\n      //遍历行星数据生成星球及其轨道\n      this.planetList.forEach(function (e) {\n        _this.createSphere(e);\n        _this.createTrack(e);\n      });\n      this.createOrbitControls(); //创建鼠标控制器\n      this.render(); //渲染\n    },\n    //创建宇宙(球形宇宙)\n    createUniverse: function createUniverse() {\n      var universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\n      var universeMaterial = new THREE.MeshLambertMaterial({\n        //高光材质\n        map: new THREE.TextureLoader().load(universeImg),\n        side: THREE.DoubleSide //双面显示\n      });\n      //宇宙网格\n      var universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\n      universeMesh.name = \"宇宙\";\n      scene.add(universeMesh);\n    },\n    //创建星辰\n    createStars: function createStars() {\n      var positions = [];\n      var colors = [];\n      //星辰几何体\n      var starsGeometry = new THREE.BufferGeometry();\n      //添加星辰的颜色与位置\n      for (var i = 0; i < 10000; i++) {\n        var vertex = new THREE.Vector3();\n        vertex.x = Math.random() * 2 - 1;\n        vertex.y = Math.random() * 2 - 1;\n        vertex.z = Math.random() * 2 - 1;\n        positions.push(vertex.x, vertex.y, vertex.z);\n        var color = new THREE.Color();\n        color.setRGB(255, 255, 255);\n        colors.push(color.r, color.g, color.b);\n      }\n      starsGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3));\n      starsGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      //星辰材质\n      var starsMaterial = new THREE.PointsMaterial({\n        map: new THREE.TextureLoader().load(starImg),\n        size: 5,\n        blending: THREE.AdditiveBlending,\n        fog: true,\n        depthTest: false //(不能与blending一起使用)\n        // depthWrite: false, //(深度写入)防止星辰在球体前面出现黑块\n      });\n      //星辰的集合\n      var starsMesh = new THREE.Points(starsGeometry, starsMaterial);\n      starsMesh.scale.set(7000, 7000, 7000); //设置集合体范围\n      scene.add(starsMesh);\n    },\n    //创建光源\n    createLight: function createLight() {\n      var ambient = new THREE.AmbientLight(new THREE.Color(0xffffff)); //环境光\n      scene.add(ambient);\n      var pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0); //点光源\n      pointLight.visible = true;\n      pointLight.position.set(0, 0, 0); //点光源在原点充当太阳\n      scene.add(pointLight); //点光源添加到场景中\n    },\n    //创建球体\n    createSphere: function createSphere(data) {\n      //处理特殊球体\n      if (data.name == \"太阳\") {\n        this.createSun(data);\n      } else if (data.name == \"地球\") {\n        this.createEarth(data);\n      } else if (data.name == \"金星\") {\n        this.createVenus(data);\n      } else if (data.name == \"土星\") {\n        this.createSaturn(data);\n      } else {\n        //其他球体\n        var sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100); //球体几何体\n        //球体材质\n        var sphereMaterial = new THREE.MeshLambertMaterial({\n          map: new THREE.TextureLoader().load(data.mapImg)\n        });\n        var sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial); //生成球体网格\n        sphereMesh.name = data.name; //网格名字\n        sphereMesh.planetMsg = data;\n        sphereMesh.isPlanet = true; //标识为星球\n        sphereMesh.angle = 0; //添加初始角度\n        //球体位置\n        sphereMesh.position.set(data.position[0], data.position[1], data.position[2]);\n        scene.add(sphereMesh); //球体添加到场景中\n      }\n    },\n    //创建太阳\n    createSun: function createSun(data) {\n      var sunGroup = new THREE.Group(); //太阳的组\n      var sunGeometry = new THREE.SphereGeometry(data.size, 100, 100); //太阳几何体\n      var sunMaterial = new THREE.MeshLambertMaterial({\n        //太阳材质\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg)\n      });\n      var sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\n      sunGroup.add(sunMesh);\n      //太阳大气几何体\n      var sunAtmosphereGeometry = new THREE.SphereGeometry(data.size + 8, 100, 100);\n      var sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.2\n      });\n      var sunAtmosphereMesh = new THREE.Mesh(sunAtmosphereGeometry, sunAtmosphereMaterial);\n      sunGroup.add(sunAtmosphereMesh);\n      sunGroup.name = data.name; //网格名字\n      sunGroup.planetMsg = data;\n      sunGroup.isPlanet = true; //标识为星球\n      sunGroup.angle = 0; //添加初始角度\n      //球体位置\n      sunGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(sunGroup);\n    },\n    //创建金星\n    createVenus: function createVenus(data) {\n      var venusGroup = new THREE.Group(); //金星的组\n      var venusGeometry = new THREE.SphereGeometry(data.size, 100, 100); //金星几何体\n\n      var venusMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg)\n      });\n      var venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\n      venusGroup.add(venusMesh);\n      //金星大气几何体\n      var venusAtmosphereGeometry = new THREE.SphereGeometry(data.size + 2, 100, 100);\n      //金星大气材质\n      var venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.5,\n        map: new THREE.TextureLoader().load(venusAtmosphereImg)\n      });\n      var venusAtmosphereMesh = new THREE.Mesh(venusAtmosphereGeometry, venusAtmosphereMaterial);\n      venusGroup.add(venusAtmosphereMesh); //将大气添加到组中\n      venusGroup.name = data.name; //网格名字\n      venusGroup.planetMsg = data;\n      venusGroup.isPlanet = true; //标识为星球\n      venusGroup.angle = 0; //添加初始角度\n      //球体位置\n      venusGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(venusGroup);\n    },\n    //创建地球\n    createEarth: function createEarth(data) {\n      var earthGroup = new THREE.Group(); //地球的组\n      var earthGeometry = new THREE.SphereGeometry(data.size, 100, 100); //地球几何体\n      //地球材质\n      var earthMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg),\n        normalScale: new THREE.Vector2(10, 10),\n        //凹凸深度\n        normalMap: new THREE.TextureLoader().load(earthNormalImg) //法线贴图\n      });\n      var earthMesh = new THREE.Mesh(earthGeometry, earthMaterial); //地球网格\n      earthGroup.add(earthMesh); //将地球网格添加到地球组中\n      //地球云层几何体\n      var earthCloudsGeometry = new THREE.SphereGeometry(data.size + 2, 100, 100);\n      //地球云层材质\n      var earthCloudsMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.4,\n        map: new THREE.TextureLoader().load(earthCloudsImg)\n      });\n      //地球云层网格\n      var earthCloudsMesh = new THREE.Mesh(earthCloudsGeometry, earthCloudsMaterial);\n      earthGroup.add(earthCloudsMesh); //将地球云层网格添加到地球组中\n\n      //创建月球轨道\n      var moonTrackGeometry = new THREE.RingBufferGeometry(\n      //圆环几何体\n      data.size + 40, data.size + 40.2, 100);\n      var moonTrackMaterial = new THREE.MeshLambertMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide\n      });\n      var moonTrackMesh = new THREE.Mesh(moonTrackGeometry, moonTrackMaterial);\n      moonTrackMesh.rotation.set(0.5 * Math.PI, 0, 0);\n      earthGroup.add(moonTrackMesh);\n\n      //创建月球\n      var moonGeometry = new THREE.SphereGeometry(10, 100, 100);\n      var moonMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(moonImg),\n        normalScale: new THREE.Vector2(10, 10) //凹凸深度\n      });\n      var moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\n      moonMesh.position.set(data.size + 40, 0, 0);\n      earthGroup.add(moonMesh);\n      earthGroup.name = data.name; //网格名字\n      earthGroup.planetMsg = data;\n      earthGroup.isPlanet = true; //标识为星球\n      earthGroup.angle = 0; //添加初始角度\n      //球体位置\n      earthGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(earthGroup);\n    },\n    //创建土星\n    createSaturn: function createSaturn(data) {\n      var saturnGroup = new THREE.Group(); //土星的组\n      var saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //土星几何体\n      var saturnMaterial = new THREE.MeshLambertMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg) //土星材质\n      });\n      var saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //土星网格\n      saturnGroup.add(saturnMesh); //将土星网格添加到地球组中\n      //创建土星环1\n      var saturnTrackGeometry1 = new THREE.RingBufferGeometry(\n      //圆环几何体\n      data.size + 10, data.size + 25, 100);\n      var saturnTrackMaterial1 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.8,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide\n      });\n      var saturnTrackMesh1 = new THREE.Mesh(saturnTrackGeometry1, saturnTrackMaterial1);\n      saturnTrackMesh1.rotation.set(0.5 * Math.PI, 0, 0);\n      //创建土星环2\n      var saturnTrackGeometry2 = new THREE.RingBufferGeometry(\n      //圆环几何体\n      data.size + 26, data.size + 30, 100);\n      var saturnTrackMaterial2 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.5,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide\n      });\n      var saturnTrackMesh2 = new THREE.Mesh(saturnTrackGeometry2, saturnTrackMaterial2);\n      saturnTrackMesh2.rotation.set(0.5 * Math.PI, 0, 0);\n      //创建土星环3\n      var saturnTrackGeometry3 = new THREE.RingBufferGeometry(\n      //圆环几何体\n      data.size + 30.1, data.size + 32, 100);\n      var saturnTrackMaterial3 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.3,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide\n      });\n      var saturnTrackMesh3 = new THREE.Mesh(saturnTrackGeometry3, saturnTrackMaterial3);\n      saturnTrackMesh3.rotation.set(0.5 * Math.PI, 0, 0);\n      saturnGroup.add(saturnTrackMesh1); //将网格添加到组中\n      saturnGroup.add(saturnTrackMesh2);\n      saturnGroup.add(saturnTrackMesh3);\n      saturnGroup.name = data.name; //网格名字\n      saturnGroup.planetMsg = data;\n      saturnGroup.isPlanet = true; //标识为星球\n      saturnGroup.angle = 0; //添加初始角度\n      //球体位置\n      saturnGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(saturnGroup);\n    },\n    //创建球体轨迹\n    createTrack: function createTrack(data) {\n      if (data.name == \"太阳\") {\n        //去除太阳中心由圆环形成的圆形\n        return;\n      }\n      //创建轨迹\n      var trackGeometry = new THREE.RingBufferGeometry(\n      //圆环几何体\n      data.position[0], data.position[0] + 2, 1000);\n      //圆环材质\n      var trackMaterial = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide\n      });\n      var trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\n      trackMesh.position.set(0, 0, 0); //轨道位置\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //旋转轨道至水平\n      scene.add(trackMesh);\n    },\n    //创建鼠标控件\n    createOrbitControls: function createOrbitControls() {\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\n      orbitControls.enablePan = false; //右键平移拖拽\n      orbitControls.enableZoom = true; //鼠标缩放\n      orbitControls.enableDamping = true; //滑动阻尼\n      orbitControls.dampingFactor = 0.05; //(默认.25)\n      orbitControls.minDistance = 100; //相机距离目标最小距离\n      orbitControls.maxDistance = 2700; //相机距离目标最大距离\n      // orbitControls.maxPolarAngle = (Math.PI / 4) * 3; //y旋转角度范围\n      // orbitControls.minPolarAngle = Math.PI / 4;\n      orbitControls.autoRotate = true; //自转(相机)\n      orbitControls.autoRotateSpeed = 0; //自转速度\n    },\n    //渲染\n    render: function render() {\n      //请求动画帧，屏幕每刷新一次调用一次，绑定屏幕刷新频率\n      this.anId = requestAnimationFrame(this.render); //记录下动画id可用于销毁场景\n      orbitControls.update(); //鼠标控件实时更新\n      this.renderer.render(scene, camera);\n      //控制公转\n      if (this.isRevolution) {\n        this.sphereRevolution(this.planetList); //球体公转\n      }\n      if (this.isRotation) {\n        this.sphereRotation(this.planetList); //球体自转\n      }\n      //监听画布双击事件\n      document.getElementById(\"planetDiv\") && document.getElementById(\"planetDiv\").addEventListener(\"dblclick\", this.handleDblclick, false);\n      TWEEN.update(); //更新动画\n    },\n    //双击事件\n    handleDblclick: function handleDblclick(e) {\n      var _this2 = this;\n      var dom = document.getElementById(\"planetDiv\");\n      var width = dom.clientWidth; //窗口宽度\n      var height = dom.clientHeight; //窗口高度\n      //将鼠标点击位置的屏幕坐标转换成threejs中的标准坐标\n      this.mouse.x = e.offsetX / width * 2 - 1;\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\n      // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\n      this.raycaster.setFromCamera(this.mouse, camera);\n      //生成星球网格列表\n      var palnetMeshList = [];\n      scene.children.forEach(function (p) {\n        if (p.name !== \"\") {\n          palnetMeshList.push(p);\n        }\n      });\n      // 获取raycaster直线和星球网格列表相交的集合\n      var intersects = this.raycaster.intersectObjects(palnetMeshList);\n      //判断是否点击到虚无的太空\n      if (intersects.length == 0) {\n        return;\n      }\n      //判断是否是行星\n      if (intersects[0].object.isPlanet) {\n        this.clickPlanet = intersects[0].object;\n      } else {\n        this.clickPlanet = intersects[0].object.parent;\n      }\n      // console.log(this.clickPlanet);\n      //获取球体半径\n      var planetR = \"\";\n      this.planetList.forEach(function (e) {\n        if (e.name == _this2.clickPlanet.name) {\n          planetR = e.size;\n        }\n      });\n      //相机新位置\n      var newP = {\n        x: this.clickPlanet.position.x,\n        y: this.clickPlanet.position.y + planetR,\n        z: this.clickPlanet.position.z + 2.5 * planetR\n      };\n      //双击到星球需要停止公转（双击虚空需反转公转状态）\n      if (this.clickPlanet.type !== \"Scene\") {\n        this.isRevolution = false;\n        this.isRotation = false;\n\n        //点击后传入参数飞向星球\n        this.flyTo(camera.position, orbitControls.target, newP, this.clickPlanet.position, 2000);\n      } else {\n        this.isRevolution = !this.isRevolution;\n        this.isRotation = !this.isRotation;\n      }\n    },\n    //飞向对象(旧相机位置，旧对象位置，新相机位置，新对象位置，动画时间，回调)\n    flyTo: function flyTo(oldP, oldT, newP, newT, time, callBack) {\n      if (TWEEN) {\n        var tween = new TWEEN.Tween({\n          x1: oldP.x,\n          // 相机x\n          y1: oldP.y,\n          // 相机y\n          z1: oldP.z,\n          // 相机z\n          x2: oldT.x,\n          // 控制点的中心点x\n          y2: oldT.y,\n          // 控制点的中心点y\n          z2: oldT.z // 控制点的中心点z\n        });\n        tween.to({\n          x1: newP.x,\n          y1: newP.y,\n          z1: newP.z,\n          x2: newT.x,\n          y2: newT.y,\n          z2: newT.z\n        }, time);\n        tween.onUpdate(function (object) {\n          camera.position.set(object.x1, object.y1, object.z1);\n          orbitControls.target.x = object.x2;\n          orbitControls.target.y = object.y2;\n          orbitControls.target.z = object.z2;\n          orbitControls.update();\n        });\n        tween.onComplete(function () {\n          callBack && callBack();\n        });\n        tween.easing(TWEEN.Easing.Cubic.InOut);\n        tween.start();\n      }\n    },\n    //球体自转\n    sphereRotation: function sphereRotation(data) {\n      scene.children.forEach(function (e) {\n        //过滤出星球\n        if (e.isPlanet) {\n          var _planetData = data.filter(function (d) {\n            return d.name == e.name;\n          })[0];\n          if (e.name == \"土星\") {\n            e.rotation.x = 0.05 * 2 * Math.PI;\n            // return;\n          }\n          //天王星自转轴特殊\n          if (e.name == \"天王星\") {\n            e.rotation.z = e.rotation.z + _planetData.rotation >= 2 * Math.PI ? 0 : e.rotation.z + _planetData.rotation;\n            return;\n          }\n          e.rotation.y = e.rotation.y + _planetData.rotation >= 2 * Math.PI ? 0 : e.rotation.y + _planetData.rotation;\n        }\n      });\n    },\n    //球体公转\n    sphereRevolution: function sphereRevolution(data) {\n      scene.children.forEach(function (e) {\n        //过滤出星球\n        if (e.isPlanet) {\n          var _planetData2 = data.filter(function (d) {\n            return d.name == e.name;\n          })[0]; //获取球体数据\n          e.angle = e.angle + _planetData2.revolution >= 2 * Math.PI ? 0 : e.angle + _planetData2.revolution;\n          e.position.set(_planetData2.position[0] * Math.sin(e.angle), 0, _planetData2.position[0] * Math.cos(e.angle));\n        }\n      });\n    }\n  }\n};",{"version":3,"names":["THREE","TWEEN","OrbitControls","SetSolarSystem","PlanetText","planetData","universeImg","starImg","venusAtmosphereImg","moonImg","earthNormalImg","earthCloudsImg","scene","camera","orbitControls","props","components","data","dom","renderer","anId","planetList","isRevolution","isRotation","raycaster","Raycaster","mouse","Vector2","clickPlanet","computed","watch","created","mounted","init","methods","changeSet","key","val","destroyScene","cancelAnimationFrame","forceContextLoss","dispose","clear","innerHTML","_this","document","getElementById","width","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","set","lookAt","WebGLRenderer","antialias","alpha","setClearColor","setSize","appendChild","domElement","createUniverse","createStars","createLight","forEach","e","createSphere","createTrack","createOrbitControls","render","universeGeometry","SphereGeometry","universeMaterial","MeshLambertMaterial","map","TextureLoader","load","side","DoubleSide","universeMesh","Mesh","name","add","positions","colors","starsGeometry","BufferGeometry","i","vertex","Vector3","x","Math","random","y","z","push","color","Color","setRGB","r","g","b","setAttribute","Float32BufferAttribute","starsMaterial","PointsMaterial","size","blending","AdditiveBlending","fog","depthTest","starsMesh","Points","scale","ambient","AmbientLight","pointLight","PointLight","visible","createSun","createEarth","createVenus","createSaturn","sphereGeometry","sphereMaterial","mapImg","sphereMesh","planetMsg","isPlanet","angle","sunGroup","Group","sunGeometry","sunMaterial","sunMesh","sunAtmosphereGeometry","sunAtmosphereMaterial","transparent","opacity","sunAtmosphereMesh","venusGroup","venusGeometry","venusMaterial","venusMesh","venusAtmosphereGeometry","venusAtmosphereMaterial","venusAtmosphereMesh","earthGroup","earthGeometry","earthMaterial","MeshPhysicalMaterial","normalScale","normalMap","earthMesh","earthCloudsGeometry","earthCloudsMaterial","earthCloudsMesh","moonTrackGeometry","RingBufferGeometry","moonTrackMaterial","moonTrackMesh","rotation","PI","moonGeometry","moonMaterial","moonMesh","saturnGroup","saturnGeometry","saturnMaterial","saturnMesh","saturnTrackGeometry1","saturnTrackMaterial1","saturnTrackMesh1","saturnTrackGeometry2","saturnTrackMaterial2","saturnTrackMesh2","saturnTrackGeometry3","saturnTrackMaterial3","saturnTrackMesh3","trackGeometry","trackMaterial","LineBasicMaterial","trackMesh","enablePan","enableZoom","enableDamping","dampingFactor","minDistance","maxDistance","autoRotate","autoRotateSpeed","requestAnimationFrame","update","sphereRevolution","sphereRotation","addEventListener","handleDblclick","_this2","offsetX","offsetY","setFromCamera","palnetMeshList","children","p","intersects","intersectObjects","length","object","parent","planetR","newP","type","flyTo","target","oldP","oldT","newT","time","callBack","tween","Tween","x1","y1","z1","x2","y2","z2","to","onUpdate","onComplete","easing","Easing","Cubic","InOut","start","filter","d","revolution","sin","cos"],"sources":["src/views/solarSystem.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div id=\"planetDiv\">\r\n      <!--绘制canvas的盒子-->\r\n    </div>\r\n    <!--描述组件-->\r\n    <PlanetText v-if=\"clickPlanet.planetMsg\" :msg=\"clickPlanet.planetMsg\" />\r\n    <!--设置组件-->\r\n    <SetSolarSystem @changeSet=\"changeSet\" />\r\n  </div>\r\n</template>\r\n<script>\r\nimport * as THREE from \"three\";\r\nimport TWEEN from \"@tweenjs/tween.js\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; //鼠标控制\r\nimport SetSolarSystem from \"./components/SetSolarSystem\";\r\nimport PlanetText from \"./components/PlanetText\";\r\nimport planetData from \"./planetData.js\"; //导入星球数据\r\nimport universeImg from \"./img/universe.jpg\"; //宇宙\r\nimport starImg from \"./img/star.jpg\"; //星辰\r\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\"; //金星大气\r\nimport moonImg from \"./img/moon.jpg\"; //月球\r\nimport earthNormalImg from \"./img/earthNormal.jpg\"; //法线贴图\r\nimport earthCloudsImg from \"./img/earthClouds.jpg\"; //地球云层\r\n\r\nlet scene = null; //场景(频繁变更的对象放置在vue的data中会导致卡顿)\r\nlet camera = null; //相机\r\nlet orbitControls = null; //鼠标控件\r\nexport default {\r\n  props: {},\r\n  components: { SetSolarSystem, PlanetText },\r\n  data() {\r\n    return {\r\n      dom: \"\", //需要使用canvas的dom\r\n      renderer: \"\", //渲染器\r\n      anId: null, //动画id\r\n      planetList: planetData,\r\n      isRevolution: true, //公转状态\r\n      isRotation: true, //自转状态\r\n      raycaster: new THREE.Raycaster(), //光线投射器(用于鼠标点击时获取坐标)\r\n      mouse: new THREE.Vector2(), //鼠标点击的二维平面\r\n      clickPlanet: \"\", //当前点击的星球\r\n    };\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n  created() {},\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    //改变设置\r\n    changeSet(data) {\r\n      if (data.key == \"isRevolution\") {\r\n        this.isRevolution = data.val;\r\n      }\r\n      if (data.key == \"isRotation\") {\r\n        this.isRotation = data.val;\r\n      }\r\n    },\r\n    //销毁场景\r\n    destroyScene() {\r\n      cancelAnimationFrame(this.anId); //根据动画id停止动画渲染\r\n      this.renderer.forceContextLoss(); //强制失去上下文\r\n      this.renderer.dispose();\r\n      scene.clear();\r\n      scene = null;\r\n      camera = null;\r\n      orbitControls = null;\r\n      this.dom.innerHTML = null;\r\n      this.renderer = null;\r\n    },\r\n\r\n    //初始化场景\r\n    init() {\r\n      this.dom = document.getElementById(\"planetDiv\"); //获取dom\r\n      let width = this.dom.clientWidth;\r\n      let height = this.dom.clientHeight;\r\n      scene = new THREE.Scene(); //场景场景\r\n      // scene.add(new THREE.AxesHelper(500));\r\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //创建透视相机(视场、长宽比、近面、远面)\r\n      camera.position.set(0, 500, 2700); //设置相机位置\r\n      camera.lookAt(0, 0, 0);\r\n      //创建渲染器\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        antialias: true, //抗锯齿\r\n        alpha: true, //透明\r\n      });\r\n      this.renderer.setClearColor(0x000000, 0.1); //设置场景透明度\r\n      this.renderer.setSize(width, height); //设置渲染区域尺寸\r\n      this.dom.appendChild(this.renderer.domElement); //将渲染器添加到dom中形成canvas\r\n      this.createUniverse(); //创建宇宙\r\n      this.createStars(); //创建星辰\r\n      this.createLight(); //创建光源\r\n      //遍历行星数据生成星球及其轨道\r\n      this.planetList.forEach((e) => {\r\n        this.createSphere(e);\r\n        this.createTrack(e);\r\n      });\r\n      this.createOrbitControls(); //创建鼠标控制器\r\n      this.render(); //渲染\r\n    },\r\n\r\n    //创建宇宙(球形宇宙)\r\n    createUniverse() {\r\n      let universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\r\n      let universeMaterial = new THREE.MeshLambertMaterial({\r\n        //高光材质\r\n        map: new THREE.TextureLoader().load(universeImg),\r\n        side: THREE.DoubleSide, //双面显示\r\n      });\r\n      //宇宙网格\r\n      let universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\r\n      universeMesh.name = \"宇宙\";\r\n      scene.add(universeMesh);\r\n    },\r\n\r\n    //创建星辰\r\n    createStars() {\r\n      const positions = [];\r\n      const colors = [];\r\n      //星辰几何体\r\n      const starsGeometry = new THREE.BufferGeometry();\r\n      //添加星辰的颜色与位置\r\n      for (let i = 0; i < 10000; i++) {\r\n        let vertex = new THREE.Vector3();\r\n        vertex.x = Math.random() * 2 - 1;\r\n        vertex.y = Math.random() * 2 - 1;\r\n        vertex.z = Math.random() * 2 - 1;\r\n        positions.push(vertex.x, vertex.y, vertex.z);\r\n        let color = new THREE.Color();\r\n        color.setRGB(255, 255, 255);\r\n        colors.push(color.r, color.g, color.b);\r\n      }\r\n      starsGeometry.setAttribute(\r\n        \"position\",\r\n        new THREE.Float32BufferAttribute(positions, 3)\r\n      );\r\n      starsGeometry.setAttribute(\r\n        \"color\",\r\n        new THREE.Float32BufferAttribute(colors, 3)\r\n      );\r\n      //星辰材质\r\n      let starsMaterial = new THREE.PointsMaterial({\r\n        map: new THREE.TextureLoader().load(starImg),\r\n        size: 5,\r\n        blending: THREE.AdditiveBlending,\r\n        fog: true,\r\n        depthTest: false, //(不能与blending一起使用)\r\n        // depthWrite: false, //(深度写入)防止星辰在球体前面出现黑块\r\n      });\r\n      //星辰的集合\r\n      let starsMesh = new THREE.Points(starsGeometry, starsMaterial);\r\n      starsMesh.scale.set(7000, 7000, 7000); //设置集合体范围\r\n      scene.add(starsMesh);\r\n    },\r\n\r\n    //创建光源\r\n    createLight() {\r\n      let ambient = new THREE.AmbientLight(new THREE.Color(0xffffff)); //环境光\r\n      scene.add(ambient);\r\n      let pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0); //点光源\r\n      pointLight.visible = true;\r\n      pointLight.position.set(0, 0, 0); //点光源在原点充当太阳\r\n      scene.add(pointLight); //点光源添加到场景中\r\n    },\r\n\r\n    //创建球体\r\n    createSphere(data) {\r\n      //处理特殊球体\r\n      if (data.name == \"太阳\") {\r\n        this.createSun(data);\r\n      } else if (data.name == \"地球\") {\r\n        this.createEarth(data);\r\n      } else if (data.name == \"金星\") {\r\n        this.createVenus(data);\r\n      } else if (data.name == \"土星\") {\r\n        this.createSaturn(data);\r\n      } else {\r\n        //其他球体\r\n        let sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100); //球体几何体\r\n        //球体材质\r\n        let sphereMaterial = new THREE.MeshLambertMaterial({\r\n          map: new THREE.TextureLoader().load(data.mapImg),\r\n        });\r\n        let sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial); //生成球体网格\r\n        sphereMesh.name = data.name; //网格名字\r\n        sphereMesh.planetMsg = data;\r\n        sphereMesh.isPlanet = true; //标识为星球\r\n        sphereMesh.angle = 0; //添加初始角度\r\n        //球体位置\r\n        sphereMesh.position.set(\r\n          data.position[0],\r\n          data.position[1],\r\n          data.position[2]\r\n        );\r\n        scene.add(sphereMesh); //球体添加到场景中\r\n      }\r\n    },\r\n\r\n    //创建太阳\r\n    createSun(data) {\r\n      let sunGroup = new THREE.Group(); //太阳的组\r\n      let sunGeometry = new THREE.SphereGeometry(data.size, 100, 100); //太阳几何体\r\n      let sunMaterial = new THREE.MeshLambertMaterial({\r\n        //太阳材质\r\n        color: new THREE.Color(0xffffff),\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n      });\r\n      let sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\r\n      sunGroup.add(sunMesh);\r\n      //太阳大气几何体\r\n      let sunAtmosphereGeometry = new THREE.SphereGeometry(\r\n        data.size + 8,\r\n        100,\r\n        100\r\n      );\r\n      let sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.2,\r\n      });\r\n      let sunAtmosphereMesh = new THREE.Mesh(\r\n        sunAtmosphereGeometry,\r\n        sunAtmosphereMaterial\r\n      );\r\n      sunGroup.add(sunAtmosphereMesh);\r\n      sunGroup.name = data.name; //网格名字\r\n      sunGroup.planetMsg = data;\r\n      sunGroup.isPlanet = true; //标识为星球\r\n      sunGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      sunGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(sunGroup);\r\n    },\r\n\r\n    //创建金星\r\n    createVenus(data) {\r\n      let venusGroup = new THREE.Group(); //金星的组\r\n      let venusGeometry = new THREE.SphereGeometry(data.size, 100, 100); //金星几何体\r\n\r\n      let venusMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n      });\r\n      let venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\r\n      venusGroup.add(venusMesh);\r\n      //金星大气几何体\r\n      let venusAtmosphereGeometry = new THREE.SphereGeometry(\r\n        data.size + 2,\r\n        100,\r\n        100\r\n      );\r\n      //金星大气材质\r\n      let venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.5,\r\n        map: new THREE.TextureLoader().load(venusAtmosphereImg),\r\n      });\r\n      let venusAtmosphereMesh = new THREE.Mesh(\r\n        venusAtmosphereGeometry,\r\n        venusAtmosphereMaterial\r\n      );\r\n      venusGroup.add(venusAtmosphereMesh); //将大气添加到组中\r\n      venusGroup.name = data.name; //网格名字\r\n      venusGroup.planetMsg = data;\r\n      venusGroup.isPlanet = true; //标识为星球\r\n      venusGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      venusGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(venusGroup);\r\n    },\r\n\r\n    //创建地球\r\n    createEarth(data) {\r\n      let earthGroup = new THREE.Group(); //地球的组\r\n      let earthGeometry = new THREE.SphereGeometry(data.size, 100, 100); //地球几何体\r\n      //地球材质\r\n      let earthMaterial = new THREE.MeshPhysicalMaterial({\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\r\n        normalMap: new THREE.TextureLoader().load(earthNormalImg), //法线贴图\r\n      });\r\n      let earthMesh = new THREE.Mesh(earthGeometry, earthMaterial); //地球网格\r\n      earthGroup.add(earthMesh); //将地球网格添加到地球组中\r\n      //地球云层几何体\r\n      let earthCloudsGeometry = new THREE.SphereGeometry(\r\n        data.size + 2,\r\n        100,\r\n        100\r\n      );\r\n      //地球云层材质\r\n      let earthCloudsMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.4,\r\n        map: new THREE.TextureLoader().load(earthCloudsImg),\r\n      });\r\n      //地球云层网格\r\n      let earthCloudsMesh = new THREE.Mesh(\r\n        earthCloudsGeometry,\r\n        earthCloudsMaterial\r\n      );\r\n      earthGroup.add(earthCloudsMesh); //将地球云层网格添加到地球组中\r\n\r\n      //创建月球轨道\r\n      let moonTrackGeometry = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 40,\r\n        data.size + 40.2,\r\n        100\r\n      );\r\n      let moonTrackMaterial = new THREE.MeshLambertMaterial({\r\n        color: 0xffffff,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let moonTrackMesh = new THREE.Mesh(moonTrackGeometry, moonTrackMaterial);\r\n      moonTrackMesh.rotation.set(0.5 * Math.PI, 0, 0);\r\n      earthGroup.add(moonTrackMesh);\r\n\r\n      //创建月球\r\n      let moonGeometry = new THREE.SphereGeometry(10, 100, 100);\r\n      let moonMaterial = new THREE.MeshPhysicalMaterial({\r\n        map: new THREE.TextureLoader().load(moonImg),\r\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\r\n      });\r\n      let moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\r\n      moonMesh.position.set(data.size + 40, 0, 0);\r\n      earthGroup.add(moonMesh);\r\n\r\n      earthGroup.name = data.name; //网格名字\r\n      earthGroup.planetMsg = data;\r\n      earthGroup.isPlanet = true; //标识为星球\r\n      earthGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      earthGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(earthGroup);\r\n    },\r\n\r\n    //创建土星\r\n    createSaturn(data) {\r\n      let saturnGroup = new THREE.Group(); //土星的组\r\n      let saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //土星几何体\r\n      let saturnMaterial = new THREE.MeshLambertMaterial({\r\n        map: new THREE.TextureLoader().load(data.mapImg), //土星材质\r\n      });\r\n      let saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //土星网格\r\n      saturnGroup.add(saturnMesh); //将土星网格添加到地球组中\r\n      //创建土星环1\r\n      let saturnTrackGeometry1 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 10,\r\n        data.size + 25,\r\n        100\r\n      );\r\n      let saturnTrackMaterial1 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh1 = new THREE.Mesh(\r\n        saturnTrackGeometry1,\r\n        saturnTrackMaterial1\r\n      );\r\n      saturnTrackMesh1.rotation.set(0.5 * Math.PI, 0, 0);\r\n      //创建土星环2\r\n      let saturnTrackGeometry2 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 26,\r\n        data.size + 30,\r\n        100\r\n      );\r\n      let saturnTrackMaterial2 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.5,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh2 = new THREE.Mesh(\r\n        saturnTrackGeometry2,\r\n        saturnTrackMaterial2\r\n      );\r\n      saturnTrackMesh2.rotation.set(0.5 * Math.PI, 0, 0);\r\n      //创建土星环3\r\n      let saturnTrackGeometry3 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 30.1,\r\n        data.size + 32,\r\n        100\r\n      );\r\n      let saturnTrackMaterial3 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.3,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh3 = new THREE.Mesh(\r\n        saturnTrackGeometry3,\r\n        saturnTrackMaterial3\r\n      );\r\n      saturnTrackMesh3.rotation.set(0.5 * Math.PI, 0, 0);\r\n      saturnGroup.add(saturnTrackMesh1); //将网格添加到组中\r\n      saturnGroup.add(saturnTrackMesh2);\r\n      saturnGroup.add(saturnTrackMesh3);\r\n      saturnGroup.name = data.name; //网格名字\r\n      saturnGroup.planetMsg = data;\r\n      saturnGroup.isPlanet = true; //标识为星球\r\n      saturnGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      saturnGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(saturnGroup);\r\n    },\r\n\r\n    //创建球体轨迹\r\n    createTrack(data) {\r\n      if (data.name == \"太阳\") {\r\n        //去除太阳中心由圆环形成的圆形\r\n        return;\r\n      }\r\n      //创建轨迹\r\n      let trackGeometry = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.position[0],\r\n        data.position[0] + 2,\r\n        1000\r\n      );\r\n      //圆环材质\r\n      let trackMaterial = new THREE.LineBasicMaterial({\r\n        color: 0xffffff,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\r\n      trackMesh.position.set(0, 0, 0); //轨道位置\r\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //旋转轨道至水平\r\n      scene.add(trackMesh);\r\n    },\r\n\r\n    //创建鼠标控件\r\n    createOrbitControls() {\r\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\r\n      orbitControls.enablePan = false; //右键平移拖拽\r\n      orbitControls.enableZoom = true; //鼠标缩放\r\n      orbitControls.enableDamping = true; //滑动阻尼\r\n      orbitControls.dampingFactor = 0.05; //(默认.25)\r\n      orbitControls.minDistance = 100; //相机距离目标最小距离\r\n      orbitControls.maxDistance = 2700; //相机距离目标最大距离\r\n      // orbitControls.maxPolarAngle = (Math.PI / 4) * 3; //y旋转角度范围\r\n      // orbitControls.minPolarAngle = Math.PI / 4;\r\n      orbitControls.autoRotate = true; //自转(相机)\r\n      orbitControls.autoRotateSpeed = 0; //自转速度\r\n    },\r\n\r\n    //渲染\r\n    render() {\r\n      //请求动画帧，屏幕每刷新一次调用一次，绑定屏幕刷新频率\r\n      this.anId = requestAnimationFrame(this.render); //记录下动画id可用于销毁场景\r\n      orbitControls.update(); //鼠标控件实时更新\r\n      this.renderer.render(scene, camera);\r\n      //控制公转\r\n      if (this.isRevolution) {\r\n        this.sphereRevolution(this.planetList); //球体公转\r\n      }\r\n      if (this.isRotation) {\r\n        this.sphereRotation(this.planetList); //球体自转\r\n      }\r\n      //监听画布双击事件\r\n      document.getElementById(\"planetDiv\") &&\r\n        document\r\n          .getElementById(\"planetDiv\")\r\n          .addEventListener(\"dblclick\", this.handleDblclick, false);\r\n      TWEEN.update(); //更新动画\r\n    },\r\n\r\n    //双击事件\r\n    handleDblclick(e) {\r\n      let dom = document.getElementById(\"planetDiv\");\r\n      let width = dom.clientWidth; //窗口宽度\r\n      let height = dom.clientHeight; //窗口高度\r\n      //将鼠标点击位置的屏幕坐标转换成threejs中的标准坐标\r\n      this.mouse.x = (e.offsetX / width) * 2 - 1;\r\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\r\n      // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n      this.raycaster.setFromCamera(this.mouse, camera);\r\n      //生成星球网格列表\r\n      let palnetMeshList = [];\r\n      scene.children.forEach((p) => {\r\n        if (p.name !== \"\") {\r\n          palnetMeshList.push(p);\r\n        }\r\n      });\r\n      // 获取raycaster直线和星球网格列表相交的集合\r\n      let intersects = this.raycaster.intersectObjects(palnetMeshList);\r\n      //判断是否点击到虚无的太空\r\n      if (intersects.length == 0) {\r\n        return;\r\n      }\r\n      //判断是否是行星\r\n      if (intersects[0].object.isPlanet) {\r\n        this.clickPlanet = intersects[0].object;\r\n      } else {\r\n        this.clickPlanet = intersects[0].object.parent;\r\n      }\r\n      // console.log(this.clickPlanet);\r\n      //获取球体半径\r\n      let planetR = \"\";\r\n      this.planetList.forEach((e) => {\r\n        if (e.name == this.clickPlanet.name) {\r\n          planetR = e.size;\r\n        }\r\n      });\r\n      //相机新位置\r\n      let newP = {\r\n        x: this.clickPlanet.position.x,\r\n        y: this.clickPlanet.position.y + planetR,\r\n        z: this.clickPlanet.position.z + 2.5 * planetR,\r\n      };\r\n      //双击到星球需要停止公转（双击虚空需反转公转状态）\r\n      if (this.clickPlanet.type !== \"Scene\") {\r\n        this.isRevolution = false;\r\n        this.isRotation = false;\r\n\r\n        //点击后传入参数飞向星球\r\n        this.flyTo(\r\n          camera.position,\r\n          orbitControls.target,\r\n          newP,\r\n          this.clickPlanet.position,\r\n          2000\r\n        );\r\n      } else {\r\n        this.isRevolution = !this.isRevolution;\r\n        this.isRotation = !this.isRotation;\r\n      }\r\n    },\r\n\r\n    //飞向对象(旧相机位置，旧对象位置，新相机位置，新对象位置，动画时间，回调)\r\n    flyTo(oldP, oldT, newP, newT, time, callBack) {\r\n      if (TWEEN) {\r\n        let tween = new TWEEN.Tween({\r\n          x1: oldP.x, // 相机x\r\n          y1: oldP.y, // 相机y\r\n          z1: oldP.z, // 相机z\r\n          x2: oldT.x, // 控制点的中心点x\r\n          y2: oldT.y, // 控制点的中心点y\r\n          z2: oldT.z, // 控制点的中心点z\r\n        });\r\n        tween.to(\r\n          {\r\n            x1: newP.x,\r\n            y1: newP.y,\r\n            z1: newP.z,\r\n            x2: newT.x,\r\n            y2: newT.y,\r\n            z2: newT.z,\r\n          },\r\n          time\r\n        );\r\n        tween.onUpdate(function (object) {\r\n          camera.position.set(object.x1, object.y1, object.z1);\r\n          orbitControls.target.x = object.x2;\r\n          orbitControls.target.y = object.y2;\r\n          orbitControls.target.z = object.z2;\r\n          orbitControls.update();\r\n        });\r\n        tween.onComplete(function () {\r\n          callBack && callBack();\r\n        });\r\n        tween.easing(TWEEN.Easing.Cubic.InOut);\r\n        tween.start();\r\n      }\r\n    },\r\n\r\n    //球体自转\r\n    sphereRotation(data) {\r\n      scene.children.forEach((e) => {\r\n        //过滤出星球\r\n        if (e.isPlanet) {\r\n          let planetData = data.filter((d) => d.name == e.name)[0];\r\n          if (e.name == \"土星\") {\r\n            e.rotation.x = 0.05 * 2 * Math.PI;\r\n            // return;\r\n          }\r\n          //天王星自转轴特殊\r\n          if (e.name == \"天王星\") {\r\n            e.rotation.z =\r\n              e.rotation.z + planetData.rotation >= 2 * Math.PI\r\n                ? 0\r\n                : e.rotation.z + planetData.rotation;\r\n            return;\r\n          }\r\n          e.rotation.y =\r\n            e.rotation.y + planetData.rotation >= 2 * Math.PI\r\n              ? 0\r\n              : e.rotation.y + planetData.rotation;\r\n        }\r\n      });\r\n    },\r\n\r\n    //球体公转\r\n    sphereRevolution(data) {\r\n      scene.children.forEach((e) => {\r\n        //过滤出星球\r\n        if (e.isPlanet) {\r\n          let planetData = data.filter((d) => d.name == e.name)[0]; //获取球体数据\r\n          e.angle =\r\n            e.angle + planetData.revolution >= 2 * Math.PI\r\n              ? 0\r\n              : e.angle + planetData.revolution;\r\n          e.position.set(\r\n            planetData.position[0] * Math.sin(e.angle),\r\n            0,\r\n            planetData.position[0] * Math.cos(e.angle)\r\n          );\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped lang='scss'>\r\n.container {\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  #planetDiv {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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"}]}