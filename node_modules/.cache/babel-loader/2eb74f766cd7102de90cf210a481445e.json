{"remainingRequest":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/babel-loader/lib/index.js!/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ziyiwang/Desktop/COMP435-final-proj/src/views/solarSystem.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/src/views/solarSystem.vue","mtime":1702875013472},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/babel.config.js","mtime":1702875013314},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/babel-loader/lib/index.js","mtime":1702276326097},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/vue-loader/lib/index.js","mtime":1702276330641}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport SetSolarSystem from \"./components/SetSolarSystem\";\nimport PlanetText from \"./components/PlanetText\";\nimport planetData from \"./planetData.js\";\nimport universeImg from \"./img/universe.jpg\";\nimport starImg from \"./img/star.jpg\";\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\";\nimport moonImg from \"./img/moon.jpg\";\nimport earthNormalImg from \"./img/earthNormal.jpg\";\nimport earthCloudsImg from \"./img/earthClouds.jpg\";\nvar scene = null; //the scene\nvar camera = null; //the camera\nvar orbitControls = null; //mouse control\nexport default {\n  props: {},\n  components: {\n    SetSolarSystem: SetSolarSystem,\n    PlanetText: PlanetText\n  },\n  data: function data() {\n    return {\n      dom: \"\",\n      renderer: \"\",\n      anId: null,\n      planetList: planetData,\n      isRevolution: true,\n      //revolution status\n      isRotation: true,\n      //rotation status\n      raycaster: new THREE.Raycaster(),\n      //to get the coordinates of mouse when on click\n      mouse: new THREE.Vector2(),\n      clickPlanet: \"\" //the on click planet\n    };\n  },\n  computed: {},\n  watch: {},\n  created: function created() {},\n  mounted: function mounted() {\n    this.init();\n  },\n  methods: {\n    //change the two settings (rotation and revolution)\n    changeSet: function changeSet(data) {\n      if (data.key == \"isRevolution\") {\n        this.isRevolution = data.val;\n      }\n      if (data.key == \"isRotation\") {\n        this.isRotation = data.val;\n      }\n    },\n    //destroy the scene\n    destroyScene: function destroyScene() {\n      cancelAnimationFrame(this.anId); //stop rendering according to anId\n      this.renderer.forceContextLoss();\n      this.renderer.dispose();\n      scene.clear();\n      scene = null;\n      camera = null;\n      orbitControls = null;\n      this.dom.innerHTML = null;\n      this.renderer = null;\n    },\n    //initialize the scene\n    init: function init() {\n      var _this = this;\n      this.dom = document.getElementById(\"planetDiv\"); //get dom\n      var width = this.dom.clientWidth;\n      var height = this.dom.clientHeight;\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //create the perspective camera\n      camera.position.set(0, 500, 2700); //set camera position\n      camera.lookAt(0, 0, 0);\n      //create renderer\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        //antialiasing\n        alpha: true //transparency\n      });\n      this.renderer.setClearColor(0x000000, 0.1); //set scene transparency\n      this.renderer.setSize(width, height); //set renderer size\n      this.dom.appendChild(this.renderer.domElement); //add renderer to dom to form canvas\n      this.createUniverse(); //create universe\n      this.createStars(); //create stars\n      this.createLight(); //create light\n      //traverse planet data to generate planets and their orbital paths\n      this.planetList.forEach(function (e) {\n        _this.createSphere(e);\n        _this.createTrack(e);\n      });\n      this.createOrbitControls(); //create mouse controls\n      this.render(); //render\n    },\n    //create universe\n    createUniverse: function createUniverse() {\n      var universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\n      var universeMaterial = new THREE.MeshLambertMaterial({\n        //texure\n        map: new THREE.TextureLoader().load(universeImg),\n        side: THREE.DoubleSide\n      });\n      //mesh\n      var universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\n      universeMesh.name = \"universe\";\n      scene.add(universeMesh);\n    },\n    //create stars\n    createStars: function createStars() {\n      var positions = [];\n      var colors = [];\n      //create geometry\n      var starsGeometry = new THREE.BufferGeometry();\n      //color and position\n      for (var i = 0; i < 10000; i++) {\n        var vertex = new THREE.Vector3();\n        vertex.x = Math.random() * 2 - 1;\n        vertex.y = Math.random() * 2 - 1;\n        vertex.z = Math.random() * 2 - 1;\n        positions.push(vertex.x, vertex.y, vertex.z);\n        var color = new THREE.Color();\n        color.setRGB(255, 255, 255);\n        colors.push(color.r, color.g, color.b);\n      }\n      starsGeometry.setAttribute(\"position\", new THREE.Float32BufferAttribute(positions, 3));\n      starsGeometry.setAttribute(\"color\", new THREE.Float32BufferAttribute(colors, 3));\n      //texture\n      var starsMaterial = new THREE.PointsMaterial({\n        map: new THREE.TextureLoader().load(starImg),\n        size: 5,\n        blending: THREE.AdditiveBlending,\n        fog: true,\n        depthTest: false\n      });\n      //star assembly\n      var starsMesh = new THREE.Points(starsGeometry, starsMaterial);\n      starsMesh.scale.set(7000, 7000, 7000); //set the assembly scope\n      scene.add(starsMesh);\n    },\n    //create light\n    createLight: function createLight() {\n      var ambient = new THREE.AmbientLight(new THREE.Color(0xffffff));\n      scene.add(ambient);\n      var pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0);\n      pointLight.visible = true;\n      pointLight.position.set(0, 0, 0); //point light serves as the Sun\n      scene.add(pointLight);\n    },\n    //create sphere objects\n    createSphere: function createSphere(data) {\n      //special spheres\n      if (data.name == \"sun\") {\n        this.createSun(data);\n      } else if (data.name == \"earth\") {\n        this.createEarth(data);\n      } else if (data.name == \"venus\") {\n        this.createVenus(data);\n      } else if (data.name == \"saturn\") {\n        this.createSaturn(data);\n      } else {\n        //other spheres\n        var sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n        //textures\n        var sphereMaterial = new THREE.MeshLambertMaterial({\n          map: new THREE.TextureLoader().load(data.mapImg)\n        });\n        var sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphereMesh.name = data.name;\n        sphereMesh.planetMsg = data;\n        sphereMesh.isPlanet = true; //identified as planet\n        sphereMesh.angle = 0;\n        //sphere position\n        sphereMesh.position.set(data.position[0], data.position[1], data.position[2]);\n        scene.add(sphereMesh);\n      }\n    },\n    //create the Sun\n    createSun: function createSun(data) {\n      var sunGroup = new THREE.Group();\n      var sunGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n      var sunMaterial = new THREE.MeshLambertMaterial({\n        //texture\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg)\n      });\n      var sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\n      sunGroup.add(sunMesh);\n      var sunAtmosphereGeometry = new THREE.SphereGeometry(data.size + 8, 100, 100);\n      var sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.2\n      });\n      var sunAtmosphereMesh = new THREE.Mesh(sunAtmosphereGeometry, sunAtmosphereMaterial);\n      sunGroup.add(sunAtmosphereMesh);\n      sunGroup.name = data.name;\n      sunGroup.planetMsg = data;\n      sunGroup.isPlanet = true;\n      sunGroup.angle = 0;\n      //sphere position\n      sunGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(sunGroup);\n    },\n    //create Venus\n    createVenus: function createVenus(data) {\n      var venusGroup = new THREE.Group();\n      var venusGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n      var venusMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg)\n      });\n      var venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\n      venusGroup.add(venusMesh);\n      var venusAtmosphereGeometry = new THREE.SphereGeometry(data.size + 2, 100, 100);\n      //the texture of atmosphere\n      var venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.5,\n        map: new THREE.TextureLoader().load(venusAtmosphereImg)\n      });\n      var venusAtmosphereMesh = new THREE.Mesh(venusAtmosphereGeometry, venusAtmosphereMaterial);\n      venusGroup.add(venusAtmosphereMesh);\n      venusGroup.name = data.name;\n      venusGroup.planetMsg = data;\n      venusGroup.isPlanet = true;\n      venusGroup.angle = 0;\n      //sphere position\n      venusGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(venusGroup);\n    },\n    //create Earth\n    createEarth: function createEarth(data) {\n      var earthGroup = new THREE.Group();\n      var earthGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n      var earthMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg),\n        normalScale: new THREE.Vector2(10, 10),\n        //normal scale\n        normalMap: new THREE.TextureLoader().load(earthNormalImg) //normal map to strengthen surface details\n      });\n      var earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);\n      earthGroup.add(earthMesh);\n      var earthCloudsGeometry = new THREE.SphereGeometry(data.size + 2, 100, 100);\n      var earthCloudsMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.4,\n        map: new THREE.TextureLoader().load(earthCloudsImg)\n      });\n      //earth clouds mesh\n      var earthCloudsMesh = new THREE.Mesh(earthCloudsGeometry, earthCloudsMaterial);\n      earthGroup.add(earthCloudsMesh);\n      earthGroup.name = data.name;\n      earthGroup.planetMsg = data;\n      earthGroup.isPlanet = true;\n      earthGroup.angle = 0;\n      //position\n      earthGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(earthGroup);\n    },\n    //create Saturn\n    createSaturn: function createSaturn(data) {\n      var saturnGroup = new THREE.Group(); //group of Saturn\n      var saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //Saturn geometry\n      var saturnMaterial = new THREE.MeshLambertMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg) //Saturn texture\n      });\n      var saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //Saturn mesh\n      saturnGroup.add(saturnMesh); //add mesh to the group\n      //球体位置\n      saturnGroup.position.set(data.position[0], data.position[1], data.position[2]);\n      scene.add(saturnGroup);\n    },\n    //create orbital paths\n    createTrack: function createTrack(data) {\n      if (data.name == \"sun\") {\n        return;\n      }\n      //create tracks (paths)\n      var trackGeometry = new THREE.RingBufferGeometry(data.position[0], data.position[0] + 2, 1000);\n      //texture\n      var trackMaterial = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide\n      });\n      var trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\n      trackMesh.position.set(0, 0, 0); //track position\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //totation the track to horizonal\n      scene.add(trackMesh);\n    },\n    //create mouse controls\n    createOrbitControls: function createOrbitControls() {\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\n      orbitControls.enablePan = false;\n      orbitControls.enableZoom = true; //zoomming\n      orbitControls.enableDamping = true; //damping\n      orbitControls.dampingFactor = 0.05; //damping factor\n      orbitControls.minDistance = 100; //minimum distance from the camera to object\n      orbitControls.maxDistance = 2700; //maximum distance from the camera to object\n      orbitControls.autoRotate = true; //camera self rotation\n      orbitControls.autoRotateSpeed = 0;\n    },\n    //renderer\n    render: function render() {\n      //request animation frame, call it when page refreshing, bond it with the frequncy of page refreshing\n      this.anId = requestAnimationFrame(this.render); //record anId to destroy the scene\n      orbitControls.update(); //update mouse controls\n      this.renderer.render(scene, camera);\n      //control revolution\n      if (this.isRevolution) {\n        this.sphereRevolution(this.planetList); //planets revoluting\n      }\n      if (this.isRotation) {\n        this.sphereRotation(this.planetList); //planets rotating\n      }\n      //listen for canvas double-click events\n      document.getElementById(\"planetDiv\") && document.getElementById(\"planetDiv\").addEventListener(\"dblclick\", this.handleDblclick, false);\n      TWEEN.update(); //update animation\n    },\n    //double click event\n    handleDblclick: function handleDblclick(e) {\n      var _this2 = this;\n      var dom = document.getElementById(\"planetDiv\");\n      var width = dom.clientWidth; //window width\n      var height = dom.clientHeight; //window height\n      //transfer mouse position to standard position in three.js\n      this.mouse.x = e.offsetX / width * 2 - 1;\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\n      //calculate raycaster through mouse position and current camera matri\n      this.raycaster.setFromCamera(this.mouse, camera);\n      //create planet mesh list\n      var palnetMeshList = [];\n      scene.children.forEach(function (p) {\n        if (p.name !== \"\") {\n          palnetMeshList.push(p);\n        }\n      });\n      //get the intersection objects between raycaster and planets mesh list\n      var intersects = this.raycaster.intersectObjects(palnetMeshList);\n      //if is clicking nihility\n      if (intersects.length == 0) {\n        return;\n      }\n      //if is clicking a planet\n      if (intersects[0].object.isPlanet) {\n        this.clickPlanet = intersects[0].object;\n      } else {\n        this.clickPlanet = intersects[0].object.parent;\n      }\n      //get sphere radius\n      var planetR = \"\";\n      this.planetList.forEach(function (e) {\n        if (e.name == _this2.clickPlanet.name) {\n          planetR = e.size;\n        }\n      });\n      //new position of camera\n      var newP = {\n        x: this.clickPlanet.position.x,\n        y: this.clickPlanet.position.y + planetR,\n        z: this.clickPlanet.position.z + 2.5 * planetR\n      };\n      //when double clicking on planets, stop revoluting; double clicking on nihility reverses revolution status\n      if (this.clickPlanet.type !== \"Scene\") {\n        this.isRevolution = false;\n        this.isRotation = false;\n\n        //fly to the planet after click\n        this.flyTo(camera.position, orbitControls.target, newP, this.clickPlanet.position, 2000);\n      } else {\n        this.isRevolution = !this.isRevolution;\n        this.isRotation = !this.isRotation;\n      }\n    },\n    //fly to a target (old camera position，old target position，new camera position，new target position，animation time，call bacl)\n    flyTo: function flyTo(oldP, oldT, newP, newT, time, callBack) {\n      if (TWEEN) {\n        var tween = new TWEEN.Tween({\n          x1: oldP.x,\n          y1: oldP.y,\n          z1: oldP.z,\n          x2: oldT.x,\n          y2: oldT.y,\n          z2: oldT.z\n        });\n        tween.to({\n          x1: newP.x,\n          y1: newP.y,\n          z1: newP.z,\n          x2: newT.x,\n          y2: newT.y,\n          z2: newT.z\n        }, time);\n        tween.onUpdate(function (object) {\n          camera.position.set(object.x1, object.y1, object.z1);\n          orbitControls.target.x = object.x2;\n          orbitControls.target.y = object.y2;\n          orbitControls.target.z = object.z2;\n          orbitControls.update();\n        });\n        tween.onComplete(function () {\n          callBack && callBack();\n        });\n        tween.easing(TWEEN.Easing.Cubic.InOut);\n        tween.start();\n      }\n    },\n    //sphere rotation\n    sphereRotation: function sphereRotation(data) {\n      scene.children.forEach(function (e) {\n        //filter out planet\n        if (e.isPlanet) {\n          var _planetData = data.filter(function (d) {\n            return d.name == e.name;\n          })[0];\n          if (e.name == \"saturn\") {\n            e.rotation.x = 0.05 * 2 * Math.PI;\n          }\n          //special rotation for Uranus\n          if (e.name == \"uranus\") {\n            e.rotation.z = e.rotation.z + _planetData.rotation >= 2 * Math.PI ? 0 : e.rotation.z + _planetData.rotation;\n            return;\n          }\n          e.rotation.y = e.rotation.y + _planetData.rotation >= 2 * Math.PI ? 0 : e.rotation.y + _planetData.rotation;\n        }\n      });\n    },\n    //sphere revolution\n    sphereRevolution: function sphereRevolution(data) {\n      scene.children.forEach(function (e) {\n        //filter planets\n        if (e.isPlanet) {\n          var _planetData2 = data.filter(function (d) {\n            return d.name == e.name;\n          })[0]; //get planet data\n          e.angle = e.angle + _planetData2.revolution >= 2 * Math.PI ? 0 : e.angle + _planetData2.revolution;\n          e.position.set(_planetData2.position[0] * Math.sin(e.angle), 0, _planetData2.position[0] * Math.cos(e.angle));\n        }\n      });\n    }\n  }\n};",{"version":3,"names":["THREE","TWEEN","OrbitControls","SetSolarSystem","PlanetText","planetData","universeImg","starImg","venusAtmosphereImg","moonImg","earthNormalImg","earthCloudsImg","scene","camera","orbitControls","props","components","data","dom","renderer","anId","planetList","isRevolution","isRotation","raycaster","Raycaster","mouse","Vector2","clickPlanet","computed","watch","created","mounted","init","methods","changeSet","key","val","destroyScene","cancelAnimationFrame","forceContextLoss","dispose","clear","innerHTML","_this","document","getElementById","width","clientWidth","height","clientHeight","Scene","PerspectiveCamera","position","set","lookAt","WebGLRenderer","antialias","alpha","setClearColor","setSize","appendChild","domElement","createUniverse","createStars","createLight","forEach","e","createSphere","createTrack","createOrbitControls","render","universeGeometry","SphereGeometry","universeMaterial","MeshLambertMaterial","map","TextureLoader","load","side","DoubleSide","universeMesh","Mesh","name","add","positions","colors","starsGeometry","BufferGeometry","i","vertex","Vector3","x","Math","random","y","z","push","color","Color","setRGB","r","g","b","setAttribute","Float32BufferAttribute","starsMaterial","PointsMaterial","size","blending","AdditiveBlending","fog","depthTest","starsMesh","Points","scale","ambient","AmbientLight","pointLight","PointLight","visible","createSun","createEarth","createVenus","createSaturn","sphereGeometry","sphereMaterial","mapImg","sphereMesh","planetMsg","isPlanet","angle","sunGroup","Group","sunGeometry","sunMaterial","sunMesh","sunAtmosphereGeometry","sunAtmosphereMaterial","transparent","opacity","sunAtmosphereMesh","venusGroup","venusGeometry","venusMaterial","venusMesh","venusAtmosphereGeometry","venusAtmosphereMaterial","venusAtmosphereMesh","earthGroup","earthGeometry","earthMaterial","MeshPhysicalMaterial","normalScale","normalMap","earthMesh","earthCloudsGeometry","earthCloudsMaterial","earthCloudsMesh","saturnGroup","saturnGeometry","saturnMaterial","saturnMesh","trackGeometry","RingBufferGeometry","trackMaterial","LineBasicMaterial","trackMesh","rotation","PI","enablePan","enableZoom","enableDamping","dampingFactor","minDistance","maxDistance","autoRotate","autoRotateSpeed","requestAnimationFrame","update","sphereRevolution","sphereRotation","addEventListener","handleDblclick","_this2","offsetX","offsetY","setFromCamera","palnetMeshList","children","p","intersects","intersectObjects","length","object","parent","planetR","newP","type","flyTo","target","oldP","oldT","newT","time","callBack","tween","Tween","x1","y1","z1","x2","y2","z2","to","onUpdate","onComplete","easing","Easing","Cubic","InOut","start","filter","d","revolution","sin","cos"],"sources":["src/views/solarSystem.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"planetDiv\">\n      <!--绘制canvas的盒子-->\n    </div>\n    <!--描述组件-->\n    <PlanetText v-if=\"clickPlanet.planetMsg\" :msg=\"clickPlanet.planetMsg\" />\n    <!--设置组件-->\n    <SetSolarSystem @changeSet=\"changeSet\" />\n  </div>\n</template>\n<script>\nimport * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; \nimport SetSolarSystem from \"./components/SetSolarSystem\";\nimport PlanetText from \"./components/PlanetText\";\nimport planetData from \"./planetData.js\";\nimport universeImg from \"./img/universe.jpg\"; \nimport starImg from \"./img/star.jpg\";\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\";\nimport moonImg from \"./img/moon.jpg\";\nimport earthNormalImg from \"./img/earthNormal.jpg\";\nimport earthCloudsImg from \"./img/earthClouds.jpg\";\n\nlet scene = null; //the scene\nlet camera = null; //the camera\nlet orbitControls = null; //mouse control\nexport default {\n  props: {},\n  components: { SetSolarSystem, PlanetText },\n  data() {\n    return {\n      dom: \"\", \n      renderer: \"\",\n      anId: null,\n      planetList: planetData,\n      isRevolution: true, //revolution status\n      isRotation: true, //rotation status\n      raycaster: new THREE.Raycaster(), //to get the coordinates of mouse when on click\n      mouse: new THREE.Vector2(), \n      clickPlanet: \"\", //the on click planet\n    };\n  },\n  computed: {},\n  watch: {},\n  created() {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    //change the two settings (rotation and revolution)\n    changeSet(data) {\n      if (data.key == \"isRevolution\") {\n        this.isRevolution = data.val;\n      }\n      if (data.key == \"isRotation\") {\n        this.isRotation = data.val;\n      }\n    },\n    //destroy the scene\n    destroyScene() {\n      cancelAnimationFrame(this.anId); //stop rendering according to anId\n      this.renderer.forceContextLoss();\n      this.renderer.dispose();\n      scene.clear();\n      scene = null;\n      camera = null;\n      orbitControls = null;\n      this.dom.innerHTML = null;\n      this.renderer = null;\n    },\n\n    //initialize the scene\n    init() {\n      this.dom = document.getElementById(\"planetDiv\"); //get dom\n      let width = this.dom.clientWidth;\n      let height = this.dom.clientHeight;\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //create the perspective camera\n      camera.position.set(0, 500, 2700); //set camera position\n      camera.lookAt(0, 0, 0);\n      //create renderer\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true, //antialiasing\n        alpha: true, //transparency\n      });\n      this.renderer.setClearColor(0x000000, 0.1); //set scene transparency\n      this.renderer.setSize(width, height); //set renderer size\n      this.dom.appendChild(this.renderer.domElement); //add renderer to dom to form canvas\n      this.createUniverse(); //create universe\n      this.createStars(); //create stars\n      this.createLight(); //create light\n      //traverse planet data to generate planets and their orbital paths\n      this.planetList.forEach((e) => {\n        this.createSphere(e);\n        this.createTrack(e);\n      });\n      this.createOrbitControls(); //create mouse controls\n      this.render(); //render\n    },\n\n    //create universe\n    createUniverse() {\n      let universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\n      let universeMaterial = new THREE.MeshLambertMaterial({\n        //texure\n        map: new THREE.TextureLoader().load(universeImg),\n        side: THREE.DoubleSide, \n      });\n      //mesh\n      let universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\n      universeMesh.name = \"universe\";\n      scene.add(universeMesh);\n    },\n\n    //create stars\n    createStars() {\n      const positions = [];\n      const colors = [];\n      //create geometry\n      const starsGeometry = new THREE.BufferGeometry();\n      //color and position\n      for (let i = 0; i < 10000; i++) {\n        let vertex = new THREE.Vector3();\n        vertex.x = Math.random() * 2 - 1;\n        vertex.y = Math.random() * 2 - 1;\n        vertex.z = Math.random() * 2 - 1;\n        positions.push(vertex.x, vertex.y, vertex.z);\n        let color = new THREE.Color();\n        color.setRGB(255, 255, 255);\n        colors.push(color.r, color.g, color.b);\n      }\n      starsGeometry.setAttribute(\n        \"position\",\n        new THREE.Float32BufferAttribute(positions, 3)\n      );\n      starsGeometry.setAttribute(\n        \"color\",\n        new THREE.Float32BufferAttribute(colors, 3)\n      );\n      //texture\n      let starsMaterial = new THREE.PointsMaterial({\n        map: new THREE.TextureLoader().load(starImg),\n        size: 5,\n        blending: THREE.AdditiveBlending,\n        fog: true,\n        depthTest: false,\n      });\n      //star assembly\n      let starsMesh = new THREE.Points(starsGeometry, starsMaterial);\n      starsMesh.scale.set(7000, 7000, 7000); //set the assembly scope\n      scene.add(starsMesh);\n    },\n\n    //create light\n    createLight() {\n      let ambient = new THREE.AmbientLight(new THREE.Color(0xffffff)); \n      scene.add(ambient);\n      let pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0);\n      pointLight.visible = true;\n      pointLight.position.set(0, 0, 0); //point light serves as the Sun\n      scene.add(pointLight);\n    },\n\n    //create sphere objects\n    createSphere(data) {\n      //special spheres\n      if (data.name == \"sun\") {\n        this.createSun(data);\n      } else if (data.name == \"earth\") {\n        this.createEarth(data);\n      } else if (data.name == \"venus\") {\n        this.createVenus(data);\n      } else if (data.name == \"saturn\") {\n        this.createSaturn(data);\n      } else {\n        //other spheres\n        let sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100); \n        //textures\n        let sphereMaterial = new THREE.MeshLambertMaterial({\n          map: new THREE.TextureLoader().load(data.mapImg),\n        });\n        let sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n        sphereMesh.name = data.name;\n        sphereMesh.planetMsg = data;\n        sphereMesh.isPlanet = true; //identified as planet\n        sphereMesh.angle = 0; \n        //sphere position\n        sphereMesh.position.set(\n          data.position[0],\n          data.position[1],\n          data.position[2]\n        );\n        scene.add(sphereMesh);\n      }\n    },\n\n    //create the Sun\n    createSun(data) {\n      let sunGroup = new THREE.Group();\n      let sunGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n      let sunMaterial = new THREE.MeshLambertMaterial({\n        //texture\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg),\n      });\n      let sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\n      sunGroup.add(sunMesh);\n\n      let sunAtmosphereGeometry = new THREE.SphereGeometry(\n        data.size + 8,\n        100,\n        100\n      );\n      let sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.2,\n      });\n      let sunAtmosphereMesh = new THREE.Mesh(\n        sunAtmosphereGeometry,\n        sunAtmosphereMaterial\n      );\n      sunGroup.add(sunAtmosphereMesh);\n      sunGroup.name = data.name;\n      sunGroup.planetMsg = data;\n      sunGroup.isPlanet = true;\n      sunGroup.angle = 0;\n      //sphere position\n      sunGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(sunGroup);\n    },\n\n    //create Venus\n    createVenus(data) {\n      let venusGroup = new THREE.Group();\n      let venusGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n\n      let venusMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg),\n      });\n      let venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\n      venusGroup.add(venusMesh);\n      \n      let venusAtmosphereGeometry = new THREE.SphereGeometry(\n        data.size + 2,\n        100,\n        100\n      );\n      //the texture of atmosphere\n      let venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.5,\n        map: new THREE.TextureLoader().load(venusAtmosphereImg),\n      });\n      let venusAtmosphereMesh = new THREE.Mesh(\n        venusAtmosphereGeometry,\n        venusAtmosphereMaterial\n      );\n      venusGroup.add(venusAtmosphereMesh);\n      venusGroup.name = data.name;\n      venusGroup.planetMsg = data;\n      venusGroup.isPlanet = true; \n      venusGroup.angle = 0; \n      //sphere position\n      venusGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(venusGroup);\n    },\n\n    //create Earth\n    createEarth(data) {\n      let earthGroup = new THREE.Group();\n      let earthGeometry = new THREE.SphereGeometry(data.size, 100, 100);\n     \n      let earthMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg),\n        normalScale: new THREE.Vector2(10, 10), //normal scale\n        normalMap: new THREE.TextureLoader().load(earthNormalImg), //normal map to strengthen surface details\n      });\n      let earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);\n      earthGroup.add(earthMesh);\n      \n      let earthCloudsGeometry = new THREE.SphereGeometry(\n        data.size + 2,\n        100,\n        100\n      );\n      \n      let earthCloudsMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.4,\n        map: new THREE.TextureLoader().load(earthCloudsImg),\n      });\n      //earth clouds mesh\n      let earthCloudsMesh = new THREE.Mesh(\n        earthCloudsGeometry,\n        earthCloudsMaterial\n      );\n      earthGroup.add(earthCloudsMesh);\n\n      earthGroup.name = data.name;\n      earthGroup.planetMsg = data;\n      earthGroup.isPlanet = true;\n      earthGroup.angle = 0;\n      //position\n      earthGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(earthGroup);\n    },\n\n    //create Saturn\n    createSaturn(data) {\n      let saturnGroup = new THREE.Group(); //group of Saturn\n      let saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //Saturn geometry\n      let saturnMaterial = new THREE.MeshLambertMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg), //Saturn texture\n      });\n      let saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //Saturn mesh\n      saturnGroup.add(saturnMesh); //add mesh to the group\n      //球体位置\n      saturnGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(saturnGroup);\n    },\n\n    //create orbital paths\n    createTrack(data) {\n      if (data.name == \"sun\") {\n        return;\n      }\n      //create tracks (paths)\n      let trackGeometry = new THREE.RingBufferGeometry(\n        data.position[0],\n        data.position[0] + 2,\n        1000\n      );\n      //texture\n      let trackMaterial = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide,\n      });\n      let trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\n      trackMesh.position.set(0, 0, 0); //track position\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //totation the track to horizonal\n      scene.add(trackMesh);\n    },\n\n    //create mouse controls\n    createOrbitControls() {\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\n      orbitControls.enablePan = false;\n      orbitControls.enableZoom = true; //zoomming\n      orbitControls.enableDamping = true; //damping\n      orbitControls.dampingFactor = 0.05; //damping factor\n      orbitControls.minDistance = 100; //minimum distance from the camera to object\n      orbitControls.maxDistance = 2700; //maximum distance from the camera to object\n      orbitControls.autoRotate = true; //camera self rotation\n      orbitControls.autoRotateSpeed = 0;\n    },\n\n    //renderer\n    render() {\n      //request animation frame, call it when page refreshing, bond it with the frequncy of page refreshing\n      this.anId = requestAnimationFrame(this.render); //record anId to destroy the scene\n      orbitControls.update(); //update mouse controls\n      this.renderer.render(scene, camera);\n      //control revolution\n      if (this.isRevolution) {\n        this.sphereRevolution(this.planetList); //planets revoluting\n      }\n      if (this.isRotation) {\n        this.sphereRotation(this.planetList); //planets rotating\n      }\n      //listen for canvas double-click events\n      document.getElementById(\"planetDiv\") &&\n        document\n          .getElementById(\"planetDiv\")\n          .addEventListener(\"dblclick\", this.handleDblclick, false);\n      TWEEN.update(); //update animation\n    },\n\n    //double click event\n    handleDblclick(e) {\n      let dom = document.getElementById(\"planetDiv\");\n      let width = dom.clientWidth; //window width\n      let height = dom.clientHeight; //window height\n      //transfer mouse position to standard position in three.js\n      this.mouse.x = (e.offsetX / width) * 2 - 1;\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\n      //calculate raycaster through mouse position and current camera matri\n      this.raycaster.setFromCamera(this.mouse, camera);\n      //create planet mesh list\n      let palnetMeshList = [];\n      scene.children.forEach((p) => {\n        if (p.name !== \"\") {\n          palnetMeshList.push(p);\n        }\n      });\n      //get the intersection objects between raycaster and planets mesh list\n      let intersects = this.raycaster.intersectObjects(palnetMeshList);\n      //if is clicking nihility\n      if (intersects.length == 0) {\n        return;\n      }\n      //if is clicking a planet\n      if (intersects[0].object.isPlanet) {\n        this.clickPlanet = intersects[0].object;\n      } else {\n        this.clickPlanet = intersects[0].object.parent;\n      }\n      //get sphere radius\n      let planetR = \"\";\n      this.planetList.forEach((e) => {\n        if (e.name == this.clickPlanet.name) {\n          planetR = e.size;\n        }\n      });\n      //new position of camera\n      let newP = {\n        x: this.clickPlanet.position.x,\n        y: this.clickPlanet.position.y + planetR,\n        z: this.clickPlanet.position.z + 2.5 * planetR,\n      };\n      //when double clicking on planets, stop revoluting; double clicking on nihility reverses revolution status\n      if (this.clickPlanet.type !== \"Scene\") {\n        this.isRevolution = false;\n        this.isRotation = false;\n\n        //fly to the planet after click\n        this.flyTo(\n          camera.position,\n          orbitControls.target,\n          newP,\n          this.clickPlanet.position,\n          2000\n        );\n      } else {\n        this.isRevolution = !this.isRevolution;\n        this.isRotation = !this.isRotation;\n      }\n    },\n\n    //fly to a target (old camera position，old target position，new camera position，new target position，animation time，call bacl)\n    flyTo(oldP, oldT, newP, newT, time, callBack) {\n      if (TWEEN) {\n        let tween = new TWEEN.Tween({\n          x1: oldP.x, \n          y1: oldP.y, \n          z1: oldP.z, \n          x2: oldT.x, \n          y2: oldT.y, \n          z2: oldT.z,\n        });\n        tween.to(\n          {\n            x1: newP.x,\n            y1: newP.y,\n            z1: newP.z,\n            x2: newT.x,\n            y2: newT.y,\n            z2: newT.z,\n          },\n          time\n        );\n        tween.onUpdate(function (object) {\n          camera.position.set(object.x1, object.y1, object.z1);\n          orbitControls.target.x = object.x2;\n          orbitControls.target.y = object.y2;\n          orbitControls.target.z = object.z2;\n          orbitControls.update();\n        });\n        tween.onComplete(function () {\n          callBack && callBack();\n        });\n        tween.easing(TWEEN.Easing.Cubic.InOut);\n        tween.start();\n      }\n    },\n\n    //sphere rotation\n    sphereRotation(data) {\n      scene.children.forEach((e) => {\n        //filter out planet\n        if (e.isPlanet) {\n          let planetData = data.filter((d) => d.name == e.name)[0];\n          if (e.name == \"saturn\") {\n            e.rotation.x = 0.05 * 2 * Math.PI;\n          }\n          //special rotation for Uranus\n          if (e.name == \"uranus\") {\n            e.rotation.z =\n              e.rotation.z + planetData.rotation >= 2 * Math.PI\n                ? 0\n                : e.rotation.z + planetData.rotation;\n            return;\n          }\n          e.rotation.y =\n            e.rotation.y + planetData.rotation >= 2 * Math.PI\n              ? 0\n              : e.rotation.y + planetData.rotation;\n        }\n      });\n    },\n\n    //sphere revolution\n    sphereRevolution(data) {\n      scene.children.forEach((e) => {\n        //filter planets\n        if (e.isPlanet) {\n          let planetData = data.filter((d) => d.name == e.name)[0]; //get planet data\n          e.angle =\n            e.angle + planetData.revolution >= 2 * Math.PI\n              ? 0\n              : e.angle + planetData.revolution;\n          e.position.set(\n            planetData.position[0] * Math.sin(e.angle),\n            0,\n            planetData.position[0] * Math.cos(e.angle)\n          );\n        }\n      });\n    },\n  },\n};\n</script>\n<style scoped lang='scss'>\n.container {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  #planetDiv {\n    height: 100%;\n    width: 100%;\n  }\n}\n</style>"],"mappings":"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"}]}