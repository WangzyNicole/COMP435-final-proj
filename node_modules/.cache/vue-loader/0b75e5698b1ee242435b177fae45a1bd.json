{"remainingRequest":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ziyiwang/Desktop/COMP435-final-proj/src/views/solarSystem.vue?vue&type=style&index=0&id=0b6e2726&scoped=true&lang=scss","dependencies":[{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/src/views/solarSystem.vue","mtime":1702741219281},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/css-loader/index.js","mtime":1702276330458},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1702276330641},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/postcss-loader/src/index.js","mtime":1702276330600},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/sass-loader/dist/cjs.js","mtime":1702276333587},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final-proj/node_modules/vue-loader/lib/index.js","mtime":1702276330641}],"contextDependencies":[],"result":["\n.container {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  #planetDiv {\n    height: 100%;\n    width: 100%;\n  }\n}\n",{"version":3,"sources":["solarSystem.vue"],"names":[],"mappings":";AAynBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"solarSystem.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"planetDiv\">\n      <!--绘制canvas的盒子-->\n    </div>\n    <!--描述组件-->\n    <PlanetText v-if=\"clickPlanet.planetMsg\" :msg=\"clickPlanet.planetMsg\" />\n    <!--设置组件-->\n    <SetSolarSystem @changeSet=\"changeSet\" />\n  </div>\n</template>\n<script>\nimport * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; //鼠标控制\nimport SetSolarSystem from \"./components/SetSolarSystem\";\nimport PlanetText from \"./components/PlanetText\";\nimport planetData from \"./planetData.js\"; //导入星球数据\nimport universeImg from \"./img/universe.jpg\"; //宇宙\nimport starImg from \"./img/star.jpg\"; //星辰\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\"; //金星大气\nimport moonImg from \"./img/moon.jpg\"; //月球\nimport earthNormalImg from \"./img/earthNormal.jpg\"; //法线贴图\nimport earthCloudsImg from \"./img/earthClouds.jpg\"; //地球云层\n\nlet scene = null; //场景(频繁变更的对象放置在vue的data中会导致卡顿)\nlet camera = null; //相机\nlet orbitControls = null; //鼠标控件\nexport default {\n  props: {},\n  components: { SetSolarSystem, PlanetText },\n  data() {\n    return {\n      dom: \"\", //需要使用canvas的dom\n      renderer: \"\", //渲染器\n      anId: null, //动画id\n      planetList: planetData,\n      isRevolution: true, //公转状态\n      isRotation: true, //自转状态\n      raycaster: new THREE.Raycaster(), //光线投射器(用于鼠标点击时获取坐标)\n      mouse: new THREE.Vector2(), //鼠标点击的二维平面\n      clickPlanet: \"\", //当前点击的星球\n    };\n  },\n  computed: {},\n  watch: {},\n  created() {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    //改变设置\n    changeSet(data) {\n      if (data.key == \"isRevolution\") {\n        this.isRevolution = data.val;\n      }\n      if (data.key == \"isRotation\") {\n        this.isRotation = data.val;\n      }\n    },\n    //销毁场景\n    destroyScene() {\n      cancelAnimationFrame(this.anId); //根据动画id停止动画渲染\n      this.renderer.forceContextLoss(); //强制失去上下文\n      this.renderer.dispose();\n      scene.clear();\n      scene = null;\n      camera = null;\n      orbitControls = null;\n      this.dom.innerHTML = null;\n      this.renderer = null;\n    },\n\n    //初始化场景\n    init() {\n      this.dom = document.getElementById(\"planetDiv\"); //获取dom\n      let width = this.dom.clientWidth;\n      let height = this.dom.clientHeight;\n      scene = new THREE.Scene(); //场景场景\n      // scene.add(new THREE.AxesHelper(500));\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //创建透视相机(视场、长宽比、近面、远面)\n      camera.position.set(0, 500, 2700); //设置相机位置\n      camera.lookAt(0, 0, 0);\n      //创建渲染器\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true, //抗锯齿\n        alpha: true, //透明\n      });\n      this.renderer.setClearColor(0x000000, 0.1); //设置场景透明度\n      this.renderer.setSize(width, height); //设置渲染区域尺寸\n      this.dom.appendChild(this.renderer.domElement); //将渲染器添加到dom中形成canvas\n      this.createUniverse(); //创建宇宙\n      this.createStars(); //创建星辰\n      this.createLight(); //创建光源\n      //遍历行星数据生成星球及其轨道\n      this.planetList.forEach((e) => {\n        this.createSphere(e);\n        this.createTrack(e);\n      });\n      this.createOrbitControls(); //创建鼠标控制器\n      this.render(); //渲染\n    },\n\n    //创建宇宙(球形宇宙)\n    createUniverse() {\n      let universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\n      let universeMaterial = new THREE.MeshLambertMaterial({\n        //高光材质\n        map: new THREE.TextureLoader().load(universeImg),\n        side: THREE.DoubleSide, //双面显示\n      });\n      //宇宙网格\n      let universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\n      universeMesh.name = \"宇宙\";\n      scene.add(universeMesh);\n    },\n\n    //创建星辰\n    createStars() {\n      const positions = [];\n      const colors = [];\n      //星辰几何体\n      const starsGeometry = new THREE.BufferGeometry();\n      //添加星辰的颜色与位置\n      for (let i = 0; i < 10000; i++) {\n        let vertex = new THREE.Vector3();\n        vertex.x = Math.random() * 2 - 1;\n        vertex.y = Math.random() * 2 - 1;\n        vertex.z = Math.random() * 2 - 1;\n        positions.push(vertex.x, vertex.y, vertex.z);\n        let color = new THREE.Color();\n        color.setRGB(255, 255, 255);\n        colors.push(color.r, color.g, color.b);\n      }\n      starsGeometry.setAttribute(\n        \"position\",\n        new THREE.Float32BufferAttribute(positions, 3)\n      );\n      starsGeometry.setAttribute(\n        \"color\",\n        new THREE.Float32BufferAttribute(colors, 3)\n      );\n      //星辰材质\n      let starsMaterial = new THREE.PointsMaterial({\n        map: new THREE.TextureLoader().load(starImg),\n        size: 5,\n        blending: THREE.AdditiveBlending,\n        fog: true,\n        depthTest: false, //(不能与blending一起使用)\n        // depthWrite: false, //(深度写入)防止星辰在球体前面出现黑块\n      });\n      //星辰的集合\n      let starsMesh = new THREE.Points(starsGeometry, starsMaterial);\n      starsMesh.scale.set(7000, 7000, 7000); //设置集合体范围\n      scene.add(starsMesh);\n    },\n\n    //创建光源\n    createLight() {\n      let ambient = new THREE.AmbientLight(new THREE.Color(0xffffff)); //环境光\n      scene.add(ambient);\n      let pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0); //点光源\n      pointLight.visible = true;\n      pointLight.position.set(0, 0, 0); //点光源在原点充当太阳\n      scene.add(pointLight); //点光源添加到场景中\n    },\n\n    //创建球体\n    createSphere(data) {\n      //处理特殊球体\n      if (data.name == \"太阳\") {\n        this.createSun(data);\n      } else if (data.name == \"地球\") {\n        this.createEarth(data);\n      } else if (data.name == \"金星\") {\n        this.createVenus(data);\n      } else if (data.name == \"土星\") {\n        this.createSaturn(data);\n      } else {\n        //其他球体\n        let sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100); //球体几何体\n        //球体材质\n        let sphereMaterial = new THREE.MeshLambertMaterial({\n          map: new THREE.TextureLoader().load(data.mapImg),\n        });\n        let sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial); //生成球体网格\n        sphereMesh.name = data.name; //网格名字\n        sphereMesh.planetMsg = data;\n        sphereMesh.isPlanet = true; //标识为星球\n        sphereMesh.angle = 0; //添加初始角度\n        //球体位置\n        sphereMesh.position.set(\n          data.position[0],\n          data.position[1],\n          data.position[2]\n        );\n        scene.add(sphereMesh); //球体添加到场景中\n      }\n    },\n\n    //创建太阳\n    createSun(data) {\n      let sunGroup = new THREE.Group(); //太阳的组\n      let sunGeometry = new THREE.SphereGeometry(data.size, 100, 100); //太阳几何体\n      let sunMaterial = new THREE.MeshLambertMaterial({\n        //太阳材质\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg),\n      });\n      let sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\n      sunGroup.add(sunMesh);\n      //太阳大气几何体\n      let sunAtmosphereGeometry = new THREE.SphereGeometry(\n        data.size + 8,\n        100,\n        100\n      );\n      let sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.2,\n      });\n      let sunAtmosphereMesh = new THREE.Mesh(\n        sunAtmosphereGeometry,\n        sunAtmosphereMaterial\n      );\n      sunGroup.add(sunAtmosphereMesh);\n      sunGroup.name = data.name; //网格名字\n      sunGroup.planetMsg = data;\n      sunGroup.isPlanet = true; //标识为星球\n      sunGroup.angle = 0; //添加初始角度\n      //球体位置\n      sunGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(sunGroup);\n    },\n\n    //创建金星\n    createVenus(data) {\n      let venusGroup = new THREE.Group(); //金星的组\n      let venusGeometry = new THREE.SphereGeometry(data.size, 100, 100); //金星几何体\n\n      let venusMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        map: new THREE.TextureLoader().load(data.mapImg),\n      });\n      let venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\n      venusGroup.add(venusMesh);\n      //金星大气几何体\n      let venusAtmosphereGeometry = new THREE.SphereGeometry(\n        data.size + 2,\n        100,\n        100\n      );\n      //金星大气材质\n      let venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.5,\n        map: new THREE.TextureLoader().load(venusAtmosphereImg),\n      });\n      let venusAtmosphereMesh = new THREE.Mesh(\n        venusAtmosphereGeometry,\n        venusAtmosphereMaterial\n      );\n      venusGroup.add(venusAtmosphereMesh); //将大气添加到组中\n      venusGroup.name = data.name; //网格名字\n      venusGroup.planetMsg = data;\n      venusGroup.isPlanet = true; //标识为星球\n      venusGroup.angle = 0; //添加初始角度\n      //球体位置\n      venusGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(venusGroup);\n    },\n\n    //创建地球\n    createEarth(data) {\n      let earthGroup = new THREE.Group(); //地球的组\n      let earthGeometry = new THREE.SphereGeometry(data.size, 100, 100); //地球几何体\n      //地球材质\n      let earthMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg),\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\n        normalMap: new THREE.TextureLoader().load(earthNormalImg), //法线贴图\n      });\n      let earthMesh = new THREE.Mesh(earthGeometry, earthMaterial); //地球网格\n      earthGroup.add(earthMesh); //将地球网格添加到地球组中\n      //地球云层几何体\n      let earthCloudsGeometry = new THREE.SphereGeometry(\n        data.size + 2,\n        100,\n        100\n      );\n      //地球云层材质\n      let earthCloudsMaterial = new THREE.MeshLambertMaterial({\n        color: new THREE.Color(0xffffff),\n        transparent: true,\n        opacity: 0.4,\n        map: new THREE.TextureLoader().load(earthCloudsImg),\n      });\n      //地球云层网格\n      let earthCloudsMesh = new THREE.Mesh(\n        earthCloudsGeometry,\n        earthCloudsMaterial\n      );\n      earthGroup.add(earthCloudsMesh); //将地球云层网格添加到地球组中\n\n      //创建月球轨道\n      let moonTrackGeometry = new THREE.RingBufferGeometry( //圆环几何体\n        data.size + 40,\n        data.size + 40.2,\n        100\n      );\n      let moonTrackMaterial = new THREE.MeshLambertMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide,\n      });\n      let moonTrackMesh = new THREE.Mesh(moonTrackGeometry, moonTrackMaterial);\n      moonTrackMesh.rotation.set(0.5 * Math.PI, 0, 0);\n      earthGroup.add(moonTrackMesh);\n\n      //创建月球\n      let moonGeometry = new THREE.SphereGeometry(10, 100, 100);\n      let moonMaterial = new THREE.MeshPhysicalMaterial({\n        map: new THREE.TextureLoader().load(moonImg),\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\n      });\n      let moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\n      moonMesh.position.set(data.size + 40, 0, 0);\n      earthGroup.add(moonMesh);\n\n      earthGroup.name = data.name; //网格名字\n      earthGroup.planetMsg = data;\n      earthGroup.isPlanet = true; //标识为星球\n      earthGroup.angle = 0; //添加初始角度\n      //球体位置\n      earthGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(earthGroup);\n    },\n\n    //创建土星\n    createSaturn(data) {\n      let saturnGroup = new THREE.Group(); //土星的组\n      let saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //土星几何体\n      let saturnMaterial = new THREE.MeshLambertMaterial({\n        map: new THREE.TextureLoader().load(data.mapImg), //土星材质\n      });\n      let saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //土星网格\n      saturnGroup.add(saturnMesh); //将土星网格添加到地球组中\n      //创建土星环1\n      let saturnTrackGeometry1 = new THREE.RingBufferGeometry( //圆环几何体\n        data.size + 10,\n        data.size + 25,\n        100\n      );\n      let saturnTrackMaterial1 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.8,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide,\n      });\n      let saturnTrackMesh1 = new THREE.Mesh(\n        saturnTrackGeometry1,\n        saturnTrackMaterial1\n      );\n      saturnTrackMesh1.rotation.set(0.5 * Math.PI, 0, 0);\n      //创建土星环2\n      let saturnTrackGeometry2 = new THREE.RingBufferGeometry( //圆环几何体\n        data.size + 26,\n        data.size + 30,\n        100\n      );\n      let saturnTrackMaterial2 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.5,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide,\n      });\n      let saturnTrackMesh2 = new THREE.Mesh(\n        saturnTrackGeometry2,\n        saturnTrackMaterial2\n      );\n      saturnTrackMesh2.rotation.set(0.5 * Math.PI, 0, 0);\n      //创建土星环3\n      let saturnTrackGeometry3 = new THREE.RingBufferGeometry( //圆环几何体\n        data.size + 30.1,\n        data.size + 32,\n        100\n      );\n      let saturnTrackMaterial3 = new THREE.MeshLambertMaterial({\n        transparent: true,\n        opacity: 0.3,\n        color: 0xc0ad87,\n        side: THREE.DoubleSide,\n      });\n      let saturnTrackMesh3 = new THREE.Mesh(\n        saturnTrackGeometry3,\n        saturnTrackMaterial3\n      );\n      saturnTrackMesh3.rotation.set(0.5 * Math.PI, 0, 0);\n      saturnGroup.add(saturnTrackMesh1); //将网格添加到组中\n      saturnGroup.add(saturnTrackMesh2);\n      saturnGroup.add(saturnTrackMesh3);\n      saturnGroup.name = data.name; //网格名字\n      saturnGroup.planetMsg = data;\n      saturnGroup.isPlanet = true; //标识为星球\n      saturnGroup.angle = 0; //添加初始角度\n      //球体位置\n      saturnGroup.position.set(\n        data.position[0],\n        data.position[1],\n        data.position[2]\n      );\n      scene.add(saturnGroup);\n    },\n\n    //创建球体轨迹\n    createTrack(data) {\n      if (data.name == \"太阳\") {\n        //去除太阳中心由圆环形成的圆形\n        return;\n      }\n      //创建轨迹\n      let trackGeometry = new THREE.RingBufferGeometry( //圆环几何体\n        data.position[0],\n        data.position[0] + 2,\n        1000\n      );\n      //圆环材质\n      let trackMaterial = new THREE.LineBasicMaterial({\n        color: 0xffffff,\n        side: THREE.DoubleSide,\n      });\n      let trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\n      trackMesh.position.set(0, 0, 0); //轨道位置\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //旋转轨道至水平\n      scene.add(trackMesh);\n    },\n\n    //创建鼠标控件\n    createOrbitControls() {\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\n      orbitControls.enablePan = false; //右键平移拖拽\n      orbitControls.enableZoom = true; //鼠标缩放\n      orbitControls.enableDamping = true; //滑动阻尼\n      orbitControls.dampingFactor = 0.05; //(默认.25)\n      orbitControls.minDistance = 100; //相机距离目标最小距离\n      orbitControls.maxDistance = 2700; //相机距离目标最大距离\n      // orbitControls.maxPolarAngle = (Math.PI / 4) * 3; //y旋转角度范围\n      // orbitControls.minPolarAngle = Math.PI / 4;\n      orbitControls.autoRotate = true; //自转(相机)\n      orbitControls.autoRotateSpeed = 0; //自转速度\n    },\n\n    //渲染\n    render() {\n      //请求动画帧，屏幕每刷新一次调用一次，绑定屏幕刷新频率\n      this.anId = requestAnimationFrame(this.render); //记录下动画id可用于销毁场景\n      orbitControls.update(); //鼠标控件实时更新\n      this.renderer.render(scene, camera);\n      //控制公转\n      if (this.isRevolution) {\n        this.sphereRevolution(this.planetList); //球体公转\n      }\n      if (this.isRotation) {\n        this.sphereRotation(this.planetList); //球体自转\n      }\n      //监听画布双击事件\n      document.getElementById(\"planetDiv\") &&\n        document\n          .getElementById(\"planetDiv\")\n          .addEventListener(\"dblclick\", this.handleDblclick, false);\n      TWEEN.update(); //更新动画\n    },\n\n    //双击事件\n    handleDblclick(e) {\n      let dom = document.getElementById(\"planetDiv\");\n      let width = dom.clientWidth; //窗口宽度\n      let height = dom.clientHeight; //窗口高度\n      //将鼠标点击位置的屏幕坐标转换成threejs中的标准坐标\n      this.mouse.x = (e.offsetX / width) * 2 - 1;\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\n      // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\n      this.raycaster.setFromCamera(this.mouse, camera);\n      //生成星球网格列表\n      let palnetMeshList = [];\n      scene.children.forEach((p) => {\n        if (p.name !== \"\") {\n          palnetMeshList.push(p);\n        }\n      });\n      // 获取raycaster直线和星球网格列表相交的集合\n      let intersects = this.raycaster.intersectObjects(palnetMeshList);\n      //判断是否点击到虚无的太空\n      if (intersects.length == 0) {\n        return;\n      }\n      //判断是否是行星\n      if (intersects[0].object.isPlanet) {\n        this.clickPlanet = intersects[0].object;\n      } else {\n        this.clickPlanet = intersects[0].object.parent;\n      }\n      // console.log(this.clickPlanet);\n      //获取球体半径\n      let planetR = \"\";\n      this.planetList.forEach((e) => {\n        if (e.name == this.clickPlanet.name) {\n          planetR = e.size;\n        }\n      });\n      //相机新位置\n      let newP = {\n        x: this.clickPlanet.position.x,\n        y: this.clickPlanet.position.y + planetR,\n        z: this.clickPlanet.position.z + 2.5 * planetR,\n      };\n      //双击到星球需要停止公转（双击虚空需反转公转状态）\n      if (this.clickPlanet.type !== \"Scene\") {\n        this.isRevolution = false;\n        this.isRotation = false;\n\n        //点击后传入参数飞向星球\n        this.flyTo(\n          camera.position,\n          orbitControls.target,\n          newP,\n          this.clickPlanet.position,\n          2000\n        );\n      } else {\n        this.isRevolution = !this.isRevolution;\n        this.isRotation = !this.isRotation;\n      }\n    },\n\n    //飞向对象(旧相机位置，旧对象位置，新相机位置，新对象位置，动画时间，回调)\n    flyTo(oldP, oldT, newP, newT, time, callBack) {\n      if (TWEEN) {\n        let tween = new TWEEN.Tween({\n          x1: oldP.x, // 相机x\n          y1: oldP.y, // 相机y\n          z1: oldP.z, // 相机z\n          x2: oldT.x, // 控制点的中心点x\n          y2: oldT.y, // 控制点的中心点y\n          z2: oldT.z, // 控制点的中心点z\n        });\n        tween.to(\n          {\n            x1: newP.x,\n            y1: newP.y,\n            z1: newP.z,\n            x2: newT.x,\n            y2: newT.y,\n            z2: newT.z,\n          },\n          time\n        );\n        tween.onUpdate(function (object) {\n          camera.position.set(object.x1, object.y1, object.z1);\n          orbitControls.target.x = object.x2;\n          orbitControls.target.y = object.y2;\n          orbitControls.target.z = object.z2;\n          orbitControls.update();\n        });\n        tween.onComplete(function () {\n          callBack && callBack();\n        });\n        tween.easing(TWEEN.Easing.Cubic.InOut);\n        tween.start();\n      }\n    },\n\n    //球体自转\n    sphereRotation(data) {\n      scene.children.forEach((e) => {\n        //过滤出星球\n        if (e.isPlanet) {\n          let planetData = data.filter((d) => d.name == e.name)[0];\n          if (e.name == \"土星\") {\n            e.rotation.x = 0.05 * 2 * Math.PI;\n            // return;\n          }\n          //天王星自转轴特殊\n          if (e.name == \"天王星\") {\n            e.rotation.z =\n              e.rotation.z + planetData.rotation >= 2 * Math.PI\n                ? 0\n                : e.rotation.z + planetData.rotation;\n            return;\n          }\n          e.rotation.y =\n            e.rotation.y + planetData.rotation >= 2 * Math.PI\n              ? 0\n              : e.rotation.y + planetData.rotation;\n        }\n      });\n    },\n\n    //球体公转\n    sphereRevolution(data) {\n      scene.children.forEach((e) => {\n        //过滤出星球\n        if (e.isPlanet) {\n          let planetData = data.filter((d) => d.name == e.name)[0]; //获取球体数据\n          e.angle =\n            e.angle + planetData.revolution >= 2 * Math.PI\n              ? 0\n              : e.angle + planetData.revolution;\n          e.position.set(\n            planetData.position[0] * Math.sin(e.angle),\n            0,\n            planetData.position[0] * Math.cos(e.angle)\n          );\n        }\n      });\n    },\n  },\n};\n</script>\n<style scoped lang='scss'>\n.container {\n  height: 100%;\n  width: 100%;\n  position: relative;\n  #planetDiv {\n    height: 100%;\n    width: 100%;\n  }\n}\n</style>"]}]}