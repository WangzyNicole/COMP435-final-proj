{"remainingRequest":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ziyiwang/Desktop/COMP435-final proj copy/src/views/solarSystem.vue?vue&type=style&index=0&id=0b6e2726&scoped=true&lang=scss","dependencies":[{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/src/views/solarSystem.vue","mtime":1702085772000},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/css-loader/index.js","mtime":1702276330458},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1702276330641},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/postcss-loader/src/index.js","mtime":1702276330600},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/sass-loader/dist/cjs.js","mtime":1702276333587},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/cache-loader/dist/cjs.js","mtime":1702276330406},{"path":"/Users/ziyiwang/Desktop/COMP435-final proj copy/node_modules/vue-loader/lib/index.js","mtime":1702276330641}],"contextDependencies":[],"result":["\r\n.container {\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  #planetDiv {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n}\r\n",{"version":3,"sources":["solarSystem.vue"],"names":[],"mappings":";AAynBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"solarSystem.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div id=\"planetDiv\">\r\n      <!--绘制canvas的盒子-->\r\n    </div>\r\n    <!--描述组件-->\r\n    <PlanetText v-if=\"clickPlanet.planetMsg\" :msg=\"clickPlanet.planetMsg\" />\r\n    <!--设置组件-->\r\n    <SetSolarSystem @changeSet=\"changeSet\" />\r\n  </div>\r\n</template>\r\n<script>\r\nimport * as THREE from \"three\";\r\nimport TWEEN from \"@tweenjs/tween.js\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"; //鼠标控制\r\nimport SetSolarSystem from \"./components/SetSolarSystem\";\r\nimport PlanetText from \"./components/PlanetText\";\r\nimport planetData from \"./planetData.js\"; //导入星球数据\r\nimport universeImg from \"./img/universe.jpg\"; //宇宙\r\nimport starImg from \"./img/star.jpg\"; //星辰\r\nimport venusAtmosphereImg from \"./img/venusAtmosphere.jpg\"; //金星大气\r\nimport moonImg from \"./img/moon.jpg\"; //月球\r\nimport earthNormalImg from \"./img/earthNormal.jpg\"; //法线贴图\r\nimport earthCloudsImg from \"./img/earthClouds.jpg\"; //地球云层\r\n\r\nlet scene = null; //场景(频繁变更的对象放置在vue的data中会导致卡顿)\r\nlet camera = null; //相机\r\nlet orbitControls = null; //鼠标控件\r\nexport default {\r\n  props: {},\r\n  components: { SetSolarSystem, PlanetText },\r\n  data() {\r\n    return {\r\n      dom: \"\", //需要使用canvas的dom\r\n      renderer: \"\", //渲染器\r\n      anId: null, //动画id\r\n      planetList: planetData,\r\n      isRevolution: true, //公转状态\r\n      isRotation: true, //自转状态\r\n      raycaster: new THREE.Raycaster(), //光线投射器(用于鼠标点击时获取坐标)\r\n      mouse: new THREE.Vector2(), //鼠标点击的二维平面\r\n      clickPlanet: \"\", //当前点击的星球\r\n    };\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n  created() {},\r\n  mounted() {\r\n    this.init();\r\n  },\r\n  methods: {\r\n    //改变设置\r\n    changeSet(data) {\r\n      if (data.key == \"isRevolution\") {\r\n        this.isRevolution = data.val;\r\n      }\r\n      if (data.key == \"isRotation\") {\r\n        this.isRotation = data.val;\r\n      }\r\n    },\r\n    //销毁场景\r\n    destroyScene() {\r\n      cancelAnimationFrame(this.anId); //根据动画id停止动画渲染\r\n      this.renderer.forceContextLoss(); //强制失去上下文\r\n      this.renderer.dispose();\r\n      scene.clear();\r\n      scene = null;\r\n      camera = null;\r\n      orbitControls = null;\r\n      this.dom.innerHTML = null;\r\n      this.renderer = null;\r\n    },\r\n\r\n    //初始化场景\r\n    init() {\r\n      this.dom = document.getElementById(\"planetDiv\"); //获取dom\r\n      let width = this.dom.clientWidth;\r\n      let height = this.dom.clientHeight;\r\n      scene = new THREE.Scene(); //场景场景\r\n      // scene.add(new THREE.AxesHelper(500));\r\n      camera = new THREE.PerspectiveCamera(45, width / height, 1, 50000); //创建透视相机(视场、长宽比、近面、远面)\r\n      camera.position.set(0, 500, 2700); //设置相机位置\r\n      camera.lookAt(0, 0, 0);\r\n      //创建渲染器\r\n      this.renderer = new THREE.WebGLRenderer({\r\n        antialias: true, //抗锯齿\r\n        alpha: true, //透明\r\n      });\r\n      this.renderer.setClearColor(0x000000, 0.1); //设置场景透明度\r\n      this.renderer.setSize(width, height); //设置渲染区域尺寸\r\n      this.dom.appendChild(this.renderer.domElement); //将渲染器添加到dom中形成canvas\r\n      this.createUniverse(); //创建宇宙\r\n      this.createStars(); //创建星辰\r\n      this.createLight(); //创建光源\r\n      //遍历行星数据生成星球及其轨道\r\n      this.planetList.forEach((e) => {\r\n        this.createSphere(e);\r\n        this.createTrack(e);\r\n      });\r\n      this.createOrbitControls(); //创建鼠标控制器\r\n      this.render(); //渲染\r\n    },\r\n\r\n    //创建宇宙(球形宇宙)\r\n    createUniverse() {\r\n      let universeGeometry = new THREE.SphereGeometry(7000, 100, 100);\r\n      let universeMaterial = new THREE.MeshLambertMaterial({\r\n        //高光材质\r\n        map: new THREE.TextureLoader().load(universeImg),\r\n        side: THREE.DoubleSide, //双面显示\r\n      });\r\n      //宇宙网格\r\n      let universeMesh = new THREE.Mesh(universeGeometry, universeMaterial);\r\n      universeMesh.name = \"宇宙\";\r\n      scene.add(universeMesh);\r\n    },\r\n\r\n    //创建星辰\r\n    createStars() {\r\n      const positions = [];\r\n      const colors = [];\r\n      //星辰几何体\r\n      const starsGeometry = new THREE.BufferGeometry();\r\n      //添加星辰的颜色与位置\r\n      for (let i = 0; i < 10000; i++) {\r\n        let vertex = new THREE.Vector3();\r\n        vertex.x = Math.random() * 2 - 1;\r\n        vertex.y = Math.random() * 2 - 1;\r\n        vertex.z = Math.random() * 2 - 1;\r\n        positions.push(vertex.x, vertex.y, vertex.z);\r\n        let color = new THREE.Color();\r\n        color.setRGB(255, 255, 255);\r\n        colors.push(color.r, color.g, color.b);\r\n      }\r\n      starsGeometry.setAttribute(\r\n        \"position\",\r\n        new THREE.Float32BufferAttribute(positions, 3)\r\n      );\r\n      starsGeometry.setAttribute(\r\n        \"color\",\r\n        new THREE.Float32BufferAttribute(colors, 3)\r\n      );\r\n      //星辰材质\r\n      let starsMaterial = new THREE.PointsMaterial({\r\n        map: new THREE.TextureLoader().load(starImg),\r\n        size: 5,\r\n        blending: THREE.AdditiveBlending,\r\n        fog: true,\r\n        depthTest: false, //(不能与blending一起使用)\r\n        // depthWrite: false, //(深度写入)防止星辰在球体前面出现黑块\r\n      });\r\n      //星辰的集合\r\n      let starsMesh = new THREE.Points(starsGeometry, starsMaterial);\r\n      starsMesh.scale.set(7000, 7000, 7000); //设置集合体范围\r\n      scene.add(starsMesh);\r\n    },\r\n\r\n    //创建光源\r\n    createLight() {\r\n      let ambient = new THREE.AmbientLight(new THREE.Color(0xffffff)); //环境光\r\n      scene.add(ambient);\r\n      let pointLight = new THREE.PointLight(new THREE.Color(0xffffff), 2, 1, 0); //点光源\r\n      pointLight.visible = true;\r\n      pointLight.position.set(0, 0, 0); //点光源在原点充当太阳\r\n      scene.add(pointLight); //点光源添加到场景中\r\n    },\r\n\r\n    //创建球体\r\n    createSphere(data) {\r\n      //处理特殊球体\r\n      if (data.name == \"太阳\") {\r\n        this.createSun(data);\r\n      } else if (data.name == \"地球\") {\r\n        this.createEarth(data);\r\n      } else if (data.name == \"金星\") {\r\n        this.createVenus(data);\r\n      } else if (data.name == \"土星\") {\r\n        this.createSaturn(data);\r\n      } else {\r\n        //其他球体\r\n        let sphereGeometry = new THREE.SphereGeometry(data.size, 100, 100); //球体几何体\r\n        //球体材质\r\n        let sphereMaterial = new THREE.MeshLambertMaterial({\r\n          map: new THREE.TextureLoader().load(data.mapImg),\r\n        });\r\n        let sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial); //生成球体网格\r\n        sphereMesh.name = data.name; //网格名字\r\n        sphereMesh.planetMsg = data;\r\n        sphereMesh.isPlanet = true; //标识为星球\r\n        sphereMesh.angle = 0; //添加初始角度\r\n        //球体位置\r\n        sphereMesh.position.set(\r\n          data.position[0],\r\n          data.position[1],\r\n          data.position[2]\r\n        );\r\n        scene.add(sphereMesh); //球体添加到场景中\r\n      }\r\n    },\r\n\r\n    //创建太阳\r\n    createSun(data) {\r\n      let sunGroup = new THREE.Group(); //太阳的组\r\n      let sunGeometry = new THREE.SphereGeometry(data.size, 100, 100); //太阳几何体\r\n      let sunMaterial = new THREE.MeshLambertMaterial({\r\n        //太阳材质\r\n        color: new THREE.Color(0xffffff),\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n      });\r\n      let sunMesh = new THREE.Mesh(sunGeometry, sunMaterial);\r\n      sunGroup.add(sunMesh);\r\n      //太阳大气几何体\r\n      let sunAtmosphereGeometry = new THREE.SphereGeometry(\r\n        data.size + 8,\r\n        100,\r\n        100\r\n      );\r\n      let sunAtmosphereMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.2,\r\n      });\r\n      let sunAtmosphereMesh = new THREE.Mesh(\r\n        sunAtmosphereGeometry,\r\n        sunAtmosphereMaterial\r\n      );\r\n      sunGroup.add(sunAtmosphereMesh);\r\n      sunGroup.name = data.name; //网格名字\r\n      sunGroup.planetMsg = data;\r\n      sunGroup.isPlanet = true; //标识为星球\r\n      sunGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      sunGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(sunGroup);\r\n    },\r\n\r\n    //创建金星\r\n    createVenus(data) {\r\n      let venusGroup = new THREE.Group(); //金星的组\r\n      let venusGeometry = new THREE.SphereGeometry(data.size, 100, 100); //金星几何体\r\n\r\n      let venusMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n      });\r\n      let venusMesh = new THREE.Mesh(venusGeometry, venusMaterial);\r\n      venusGroup.add(venusMesh);\r\n      //金星大气几何体\r\n      let venusAtmosphereGeometry = new THREE.SphereGeometry(\r\n        data.size + 2,\r\n        100,\r\n        100\r\n      );\r\n      //金星大气材质\r\n      let venusAtmosphereMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.5,\r\n        map: new THREE.TextureLoader().load(venusAtmosphereImg),\r\n      });\r\n      let venusAtmosphereMesh = new THREE.Mesh(\r\n        venusAtmosphereGeometry,\r\n        venusAtmosphereMaterial\r\n      );\r\n      venusGroup.add(venusAtmosphereMesh); //将大气添加到组中\r\n      venusGroup.name = data.name; //网格名字\r\n      venusGroup.planetMsg = data;\r\n      venusGroup.isPlanet = true; //标识为星球\r\n      venusGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      venusGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(venusGroup);\r\n    },\r\n\r\n    //创建地球\r\n    createEarth(data) {\r\n      let earthGroup = new THREE.Group(); //地球的组\r\n      let earthGeometry = new THREE.SphereGeometry(data.size, 100, 100); //地球几何体\r\n      //地球材质\r\n      let earthMaterial = new THREE.MeshPhysicalMaterial({\r\n        map: new THREE.TextureLoader().load(data.mapImg),\r\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\r\n        normalMap: new THREE.TextureLoader().load(earthNormalImg), //法线贴图\r\n      });\r\n      let earthMesh = new THREE.Mesh(earthGeometry, earthMaterial); //地球网格\r\n      earthGroup.add(earthMesh); //将地球网格添加到地球组中\r\n      //地球云层几何体\r\n      let earthCloudsGeometry = new THREE.SphereGeometry(\r\n        data.size + 2,\r\n        100,\r\n        100\r\n      );\r\n      //地球云层材质\r\n      let earthCloudsMaterial = new THREE.MeshLambertMaterial({\r\n        color: new THREE.Color(0xffffff),\r\n        transparent: true,\r\n        opacity: 0.4,\r\n        map: new THREE.TextureLoader().load(earthCloudsImg),\r\n      });\r\n      //地球云层网格\r\n      let earthCloudsMesh = new THREE.Mesh(\r\n        earthCloudsGeometry,\r\n        earthCloudsMaterial\r\n      );\r\n      earthGroup.add(earthCloudsMesh); //将地球云层网格添加到地球组中\r\n\r\n      //创建月球轨道\r\n      let moonTrackGeometry = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 40,\r\n        data.size + 40.2,\r\n        100\r\n      );\r\n      let moonTrackMaterial = new THREE.MeshLambertMaterial({\r\n        color: 0xffffff,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let moonTrackMesh = new THREE.Mesh(moonTrackGeometry, moonTrackMaterial);\r\n      moonTrackMesh.rotation.set(0.5 * Math.PI, 0, 0);\r\n      earthGroup.add(moonTrackMesh);\r\n\r\n      //创建月球\r\n      let moonGeometry = new THREE.SphereGeometry(10, 100, 100);\r\n      let moonMaterial = new THREE.MeshPhysicalMaterial({\r\n        map: new THREE.TextureLoader().load(moonImg),\r\n        normalScale: new THREE.Vector2(10, 10), //凹凸深度\r\n      });\r\n      let moonMesh = new THREE.Mesh(moonGeometry, moonMaterial);\r\n      moonMesh.position.set(data.size + 40, 0, 0);\r\n      earthGroup.add(moonMesh);\r\n\r\n      earthGroup.name = data.name; //网格名字\r\n      earthGroup.planetMsg = data;\r\n      earthGroup.isPlanet = true; //标识为星球\r\n      earthGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      earthGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(earthGroup);\r\n    },\r\n\r\n    //创建土星\r\n    createSaturn(data) {\r\n      let saturnGroup = new THREE.Group(); //土星的组\r\n      let saturnGeometry = new THREE.SphereGeometry(data.size, 100, 100); //土星几何体\r\n      let saturnMaterial = new THREE.MeshLambertMaterial({\r\n        map: new THREE.TextureLoader().load(data.mapImg), //土星材质\r\n      });\r\n      let saturnMesh = new THREE.Mesh(saturnGeometry, saturnMaterial); //土星网格\r\n      saturnGroup.add(saturnMesh); //将土星网格添加到地球组中\r\n      //创建土星环1\r\n      let saturnTrackGeometry1 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 10,\r\n        data.size + 25,\r\n        100\r\n      );\r\n      let saturnTrackMaterial1 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh1 = new THREE.Mesh(\r\n        saturnTrackGeometry1,\r\n        saturnTrackMaterial1\r\n      );\r\n      saturnTrackMesh1.rotation.set(0.5 * Math.PI, 0, 0);\r\n      //创建土星环2\r\n      let saturnTrackGeometry2 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 26,\r\n        data.size + 30,\r\n        100\r\n      );\r\n      let saturnTrackMaterial2 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.5,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh2 = new THREE.Mesh(\r\n        saturnTrackGeometry2,\r\n        saturnTrackMaterial2\r\n      );\r\n      saturnTrackMesh2.rotation.set(0.5 * Math.PI, 0, 0);\r\n      //创建土星环3\r\n      let saturnTrackGeometry3 = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.size + 30.1,\r\n        data.size + 32,\r\n        100\r\n      );\r\n      let saturnTrackMaterial3 = new THREE.MeshLambertMaterial({\r\n        transparent: true,\r\n        opacity: 0.3,\r\n        color: 0xc0ad87,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let saturnTrackMesh3 = new THREE.Mesh(\r\n        saturnTrackGeometry3,\r\n        saturnTrackMaterial3\r\n      );\r\n      saturnTrackMesh3.rotation.set(0.5 * Math.PI, 0, 0);\r\n      saturnGroup.add(saturnTrackMesh1); //将网格添加到组中\r\n      saturnGroup.add(saturnTrackMesh2);\r\n      saturnGroup.add(saturnTrackMesh3);\r\n      saturnGroup.name = data.name; //网格名字\r\n      saturnGroup.planetMsg = data;\r\n      saturnGroup.isPlanet = true; //标识为星球\r\n      saturnGroup.angle = 0; //添加初始角度\r\n      //球体位置\r\n      saturnGroup.position.set(\r\n        data.position[0],\r\n        data.position[1],\r\n        data.position[2]\r\n      );\r\n      scene.add(saturnGroup);\r\n    },\r\n\r\n    //创建球体轨迹\r\n    createTrack(data) {\r\n      if (data.name == \"太阳\") {\r\n        //去除太阳中心由圆环形成的圆形\r\n        return;\r\n      }\r\n      //创建轨迹\r\n      let trackGeometry = new THREE.RingBufferGeometry( //圆环几何体\r\n        data.position[0],\r\n        data.position[0] + 2,\r\n        1000\r\n      );\r\n      //圆环材质\r\n      let trackMaterial = new THREE.LineBasicMaterial({\r\n        color: 0xffffff,\r\n        side: THREE.DoubleSide,\r\n      });\r\n      let trackMesh = new THREE.Mesh(trackGeometry, trackMaterial);\r\n      trackMesh.position.set(0, 0, 0); //轨道位置\r\n      trackMesh.rotation.set(0.5 * Math.PI, 0, 0); //旋转轨道至水平\r\n      scene.add(trackMesh);\r\n    },\r\n\r\n    //创建鼠标控件\r\n    createOrbitControls() {\r\n      orbitControls = new OrbitControls(camera, this.renderer.domElement);\r\n      orbitControls.enablePan = false; //右键平移拖拽\r\n      orbitControls.enableZoom = true; //鼠标缩放\r\n      orbitControls.enableDamping = true; //滑动阻尼\r\n      orbitControls.dampingFactor = 0.05; //(默认.25)\r\n      orbitControls.minDistance = 100; //相机距离目标最小距离\r\n      orbitControls.maxDistance = 2700; //相机距离目标最大距离\r\n      // orbitControls.maxPolarAngle = (Math.PI / 4) * 3; //y旋转角度范围\r\n      // orbitControls.minPolarAngle = Math.PI / 4;\r\n      orbitControls.autoRotate = true; //自转(相机)\r\n      orbitControls.autoRotateSpeed = 0; //自转速度\r\n    },\r\n\r\n    //渲染\r\n    render() {\r\n      //请求动画帧，屏幕每刷新一次调用一次，绑定屏幕刷新频率\r\n      this.anId = requestAnimationFrame(this.render); //记录下动画id可用于销毁场景\r\n      orbitControls.update(); //鼠标控件实时更新\r\n      this.renderer.render(scene, camera);\r\n      //控制公转\r\n      if (this.isRevolution) {\r\n        this.sphereRevolution(this.planetList); //球体公转\r\n      }\r\n      if (this.isRotation) {\r\n        this.sphereRotation(this.planetList); //球体自转\r\n      }\r\n      //监听画布双击事件\r\n      document.getElementById(\"planetDiv\") &&\r\n        document\r\n          .getElementById(\"planetDiv\")\r\n          .addEventListener(\"dblclick\", this.handleDblclick, false);\r\n      TWEEN.update(); //更新动画\r\n    },\r\n\r\n    //双击事件\r\n    handleDblclick(e) {\r\n      let dom = document.getElementById(\"planetDiv\");\r\n      let width = dom.clientWidth; //窗口宽度\r\n      let height = dom.clientHeight; //窗口高度\r\n      //将鼠标点击位置的屏幕坐标转换成threejs中的标准坐标\r\n      this.mouse.x = (e.offsetX / width) * 2 - 1;\r\n      this.mouse.y = -(e.offsetY / height) * 2 + 1;\r\n      // 通过鼠标点的位置和当前相机的矩阵计算出raycaster\r\n      this.raycaster.setFromCamera(this.mouse, camera);\r\n      //生成星球网格列表\r\n      let palnetMeshList = [];\r\n      scene.children.forEach((p) => {\r\n        if (p.name !== \"\") {\r\n          palnetMeshList.push(p);\r\n        }\r\n      });\r\n      // 获取raycaster直线和星球网格列表相交的集合\r\n      let intersects = this.raycaster.intersectObjects(palnetMeshList);\r\n      //判断是否点击到虚无的太空\r\n      if (intersects.length == 0) {\r\n        return;\r\n      }\r\n      //判断是否是行星\r\n      if (intersects[0].object.isPlanet) {\r\n        this.clickPlanet = intersects[0].object;\r\n      } else {\r\n        this.clickPlanet = intersects[0].object.parent;\r\n      }\r\n      // console.log(this.clickPlanet);\r\n      //获取球体半径\r\n      let planetR = \"\";\r\n      this.planetList.forEach((e) => {\r\n        if (e.name == this.clickPlanet.name) {\r\n          planetR = e.size;\r\n        }\r\n      });\r\n      //相机新位置\r\n      let newP = {\r\n        x: this.clickPlanet.position.x,\r\n        y: this.clickPlanet.position.y + planetR,\r\n        z: this.clickPlanet.position.z + 2.5 * planetR,\r\n      };\r\n      //双击到星球需要停止公转（双击虚空需反转公转状态）\r\n      if (this.clickPlanet.type !== \"Scene\") {\r\n        this.isRevolution = false;\r\n        this.isRotation = false;\r\n\r\n        //点击后传入参数飞向星球\r\n        this.flyTo(\r\n          camera.position,\r\n          orbitControls.target,\r\n          newP,\r\n          this.clickPlanet.position,\r\n          2000\r\n        );\r\n      } else {\r\n        this.isRevolution = !this.isRevolution;\r\n        this.isRotation = !this.isRotation;\r\n      }\r\n    },\r\n\r\n    //飞向对象(旧相机位置，旧对象位置，新相机位置，新对象位置，动画时间，回调)\r\n    flyTo(oldP, oldT, newP, newT, time, callBack) {\r\n      if (TWEEN) {\r\n        let tween = new TWEEN.Tween({\r\n          x1: oldP.x, // 相机x\r\n          y1: oldP.y, // 相机y\r\n          z1: oldP.z, // 相机z\r\n          x2: oldT.x, // 控制点的中心点x\r\n          y2: oldT.y, // 控制点的中心点y\r\n          z2: oldT.z, // 控制点的中心点z\r\n        });\r\n        tween.to(\r\n          {\r\n            x1: newP.x,\r\n            y1: newP.y,\r\n            z1: newP.z,\r\n            x2: newT.x,\r\n            y2: newT.y,\r\n            z2: newT.z,\r\n          },\r\n          time\r\n        );\r\n        tween.onUpdate(function (object) {\r\n          camera.position.set(object.x1, object.y1, object.z1);\r\n          orbitControls.target.x = object.x2;\r\n          orbitControls.target.y = object.y2;\r\n          orbitControls.target.z = object.z2;\r\n          orbitControls.update();\r\n        });\r\n        tween.onComplete(function () {\r\n          callBack && callBack();\r\n        });\r\n        tween.easing(TWEEN.Easing.Cubic.InOut);\r\n        tween.start();\r\n      }\r\n    },\r\n\r\n    //球体自转\r\n    sphereRotation(data) {\r\n      scene.children.forEach((e) => {\r\n        //过滤出星球\r\n        if (e.isPlanet) {\r\n          let planetData = data.filter((d) => d.name == e.name)[0];\r\n          if (e.name == \"土星\") {\r\n            e.rotation.x = 0.05 * 2 * Math.PI;\r\n            // return;\r\n          }\r\n          //天王星自转轴特殊\r\n          if (e.name == \"天王星\") {\r\n            e.rotation.z =\r\n              e.rotation.z + planetData.rotation >= 2 * Math.PI\r\n                ? 0\r\n                : e.rotation.z + planetData.rotation;\r\n            return;\r\n          }\r\n          e.rotation.y =\r\n            e.rotation.y + planetData.rotation >= 2 * Math.PI\r\n              ? 0\r\n              : e.rotation.y + planetData.rotation;\r\n        }\r\n      });\r\n    },\r\n\r\n    //球体公转\r\n    sphereRevolution(data) {\r\n      scene.children.forEach((e) => {\r\n        //过滤出星球\r\n        if (e.isPlanet) {\r\n          let planetData = data.filter((d) => d.name == e.name)[0]; //获取球体数据\r\n          e.angle =\r\n            e.angle + planetData.revolution >= 2 * Math.PI\r\n              ? 0\r\n              : e.angle + planetData.revolution;\r\n          e.position.set(\r\n            planetData.position[0] * Math.sin(e.angle),\r\n            0,\r\n            planetData.position[0] * Math.cos(e.angle)\r\n          );\r\n        }\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style scoped lang='scss'>\r\n.container {\r\n  height: 100%;\r\n  width: 100%;\r\n  position: relative;\r\n  #planetDiv {\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"]}]}